export default {
  type: 'Chunk',
  body: [
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'engine'" },
      },
    },
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'shared'" },
      },
    },
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'arena'" },
      },
    },
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'mainmenu'" },
      },
    },
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'buy_screen'" },
      },
    },
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'objects'" },
      },
    },
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'player'" },
      },
    },
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'enemies'" },
      },
    },
    {
      type: 'CallStatement',
      expression: {
        type: 'StringCallExpression',
        base: { type: 'Identifier', name: 'require' },
        argument: { type: 'StringLiteral', value: null, raw: "'media'" },
      },
    },
    {
      type: 'FunctionDeclaration',
      identifier: { type: 'Identifier', name: 'init' },
      isLocal: false,
      parameters: [],
      body: [
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: { type: 'Identifier', name: 'shared_init' },
            arguments: [],
          },
        },
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'bind' },
              base: { type: 'Identifier', name: 'input' },
            },
            arguments: [
              { type: 'StringLiteral', value: null, raw: "'move_left'" },
              {
                type: 'TableConstructorExpression',
                fields: [
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'a'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'left'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'dpleft'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'m1'" } },
                ],
              },
            ],
          },
        },
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'bind' },
              base: { type: 'Identifier', name: 'input' },
            },
            arguments: [
              { type: 'StringLiteral', value: null, raw: "'move_right'" },
              {
                type: 'TableConstructorExpression',
                fields: [
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'d'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'e'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'s'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'right'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'dpright'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'m2'" } },
                ],
              },
            ],
          },
        },
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'bind' },
              base: { type: 'Identifier', name: 'input' },
            },
            arguments: [
              { type: 'StringLiteral', value: null, raw: "'enter'" },
              {
                type: 'TableConstructorExpression',
                fields: [
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'space'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'return'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'fleft'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'fdown'" } },
                  { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'fright'" } },
                ],
              },
            ],
          },
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 's' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKeyString',
                  key: { type: 'Identifier', name: 'tags' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'Identifier', name: 'sfx' } }],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'artificer1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                {
                  type: 'StringLiteral',
                  value: null,
                  raw: "'458586__inspectorj__ui-mechanical-notification-01-fx.ogg'",
                },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'explosion1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Explosion Grenade_04.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'mine1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Weapon Swap 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'level_up1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Buff 4.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'unlock1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Unlock 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'gambler1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Collect 5.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'usurer1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Shadow Punch 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'orb1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Collect 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'gold1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Collect 5.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'gold2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Coins - Gears - Slot.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'psychic1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Magical Impact 13.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'fire1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Fire bolt 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'fire2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Fire bolt 5.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'fire3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Fire bolt 10.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'earth1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Earth Bolt 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'earth2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Earth Bolt 14.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'earth3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Earth Bolt 20.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'illusion1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Buff 5.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'thunder1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'399656__bajko__sfx-thunder-blast.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'flagellant1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Whipping Horse 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'bard2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'376532__womb-affliction__flute-trill.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'arcane2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Magical Impact 12.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'frost1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Frost Bolt 20.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'arcane1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Magical Impact 26.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'pyro1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Fire bolt 5.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'pyro2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Explosion Fireworks_01.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'dot1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Magical Swoosh 18.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'gun_kata1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Pistol Shot_07.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'gun_kata2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Pistol Shot_08.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'dual_gunner1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Revolver Shot_07.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'dual_gunner2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Revolver Shot_08.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ui_hover1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'bamboo_hit_by_lord.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ui_switch1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Switch.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ui_switch2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Switch 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ui_transition1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Wind Bolt 8.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ui_transition2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Wind Bolt 12.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'headbutt1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Wind Bolt 14.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'critter1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Critters eating 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'critter2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Crickets Chirping 4.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'critter3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Popping bloody Sac 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'force1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Magical Impact 18.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'error1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Error 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'coins1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Coins 7.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'coins2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Coins 8.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'coins3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Coins 9.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'shoot1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Shooting Projectile (Classic) 11.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'archer1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Releasing Bow String 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'wizard1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Wind Bolt 20.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'swordsman1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Heavy sword woosh 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'swordsman2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Heavy sword woosh 19.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'scout1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Throwing Knife (Thrown) 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'scout2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Throwing Knife (Thrown) 4.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'arrow_hit_wall1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Arrow Impact wood 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'arrow_hit_wall2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Arrow Impact wood 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'hit1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Player Takes Damage 17.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'hit2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Body Head (Headshot) 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'hit3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Kick 16_1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'hit4' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Kick 16_2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'proj_hit_wall1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Player Takes Damage 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'enemy_die1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Bloody punches 7.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'enemy_die2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Bloody punches 10.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'magic_area1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Fire bolt 10.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'magic_hit1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Shadow Punch 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'magic_die1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Magical Impact 27.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'knife_hit_wall1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Shield Impacts Sword 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'blade_hit1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Sword impact (Flesh) 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'player_hit1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Body Fall 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'player_hit2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Body Fall 18.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'player_hit_wall1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Wood Heavy 5.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'pop1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Pop sounds 10.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'pop2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'467951__benzix2__ui-button-click.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'pop3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'258269__jcallison__mouth-pop.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'confirm1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'80921__justinbw__buttonchime02up.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'heal1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Buff 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'spawn1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Buff 13.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'buff1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Buff 14.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'spawn_mark1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Bonus 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'spawn_mark2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Bonus.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'alert1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Click.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'elementor1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Wind Bolt 18.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'saboteur_hit1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Explosion Flesh_01.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'saboteur_hit2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Explosion Flesh_02.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'saboteur1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Male Jump 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'saboteur2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Male Jump 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'saboteur3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Male Jump 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'spark1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Spark 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'spark2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Spark 2.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'spark3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Spark 3.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'stormweaver1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Buff 8.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'cannoneer1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Cannon shots 1.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'cannoneer2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Cannon shots 7.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'cannon_hit_wall1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Cannon impact sounds (Hitting ship) 4.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'pet1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Wolf barks 5.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'turret1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Sci Fi Machine Gun 7.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'turret2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Sniper Shot_09.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'turret_hit_wall1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Concrete 6.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'turret_hit_wall2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Concrete 7.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'turret_deploy' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'321215__hybrid-v__sci-fi-weapons-deploy.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'rogue_crit1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Dagger Stab (Flesh) 4.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'rogue_crit2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Sword hits another sword 6.ogg'" },
                { type: 'Identifier', name: 's' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'song1' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Kubbi - Ember - 01 Pathfinder.ogg'" },
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'tags' },
                      value: {
                        type: 'TableConstructorExpression',
                        fields: [{ type: 'TableValue', value: { type: 'Identifier', name: 'music' } }],
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'song2' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Kubbi - Ember - 02 Ember.ogg'" },
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'tags' },
                      value: {
                        type: 'TableConstructorExpression',
                        fields: [{ type: 'TableValue', value: { type: 'Identifier', name: 'music' } }],
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'song3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Kubbi - Ember - 03 Firelight.ogg'" },
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'tags' },
                      value: {
                        type: 'TableConstructorExpression',
                        fields: [{ type: 'TableValue', value: { type: 'Identifier', name: 'music' } }],
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'song4' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Kubbi - Ember - 04 Cascade.ogg'" },
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'tags' },
                      value: {
                        type: 'TableConstructorExpression',
                        fields: [{ type: 'TableValue', value: { type: 'Identifier', name: 'music' } }],
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'song5' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Kubbi - Ember - 05 Compass.ogg'" },
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'tags' },
                      value: {
                        type: 'TableConstructorExpression',
                        fields: [{ type: 'TableValue', value: { type: 'Identifier', name: 'music' } }],
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'death_song' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Sound' },
              arguments: [
                { type: 'StringLiteral', value: null, raw: "'Kubbi - Ember - 09 Formed by Glaciers.ogg'" },
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'tags' },
                      value: {
                        type: 'TableConstructorExpression',
                        fields: [{ type: 'TableValue', value: { type: 'Identifier', name: 'music' } }],
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'lock_image' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'lock'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'speed_booster_elite' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'speed_booster_elite'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'exploder_elite' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'exploder_elite'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'swarmer_elite' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'swarmer_elite'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'forcer_elite' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'forcer_elite'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'cluster_elite' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'cluster_elite'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'warrior' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'warrior'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ranger' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'ranger'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'healer' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'healer'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'mage' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'mage'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'rogue' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'rogue'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'nuker' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'nuker'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'conjurer' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'conjurer'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'enchanter' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'enchanter'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'psyker' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'psyker'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'curser' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'curser'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'forcer' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'forcer'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'swarmer' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'swarmer'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'voider' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'voider'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'sorcerer' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'sorcerer'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'mercenary' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'mercenary'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'explorer' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'explorer'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'star' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'star'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'arrow' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'arrow'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'centipede' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'centipede'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ouroboros_technique_r' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'ouroboros_technique_r'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ouroboros_technique_l' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'ouroboros_technique_l'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'amplify' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'amplify'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'resonance' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'resonance'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ballista' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'ballista'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'call_of_the_void' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'call_of_the_void'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'crucio' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'crucio'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'speed_3' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'speed_3'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'damage_4' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'damage_4'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'shoot_5' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'shoot_5'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'death_6' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'death_6'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'lasting_7' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'lasting_7'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'defensive_stance' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'defensive_stance'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'offensive_stance' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'offensive_stance'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'kinetic_bomb' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'kinetic_bomb'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'porcupine_technique' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'porcupine_technique'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'last_stand' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'last_stand'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'seeping' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'seeping'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'deceleration' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'deceleration'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'annihilation' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'annihilation'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'malediction' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'malediction'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'hextouch' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'hextouch'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'whispers_of_doom' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'whispers_of_doom'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'tremor' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'tremor'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'heavy_impact' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'heavy_impact'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'fracture' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'fracture'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'meat_shield' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'meat_shield'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'hive' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'hive'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'baneling_burst' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'baneling_burst'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'blunt_arrow' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'blunt_arrow'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'explosive_arrow' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'explosive_arrow'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'divine_machine_arrow' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'divine_machine_arrow'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'chronomancy' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'chronomancy'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'awakening' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'awakening'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'divine_punishment' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'divine_punishment'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'assassination' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'assassination'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'flying_daggers' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'flying_daggers'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ultimatum' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'ultimatum'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'magnify' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'magnify'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'echo_barrage' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'echo_barrage'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'unleash' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'unleash'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'reinforce' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'reinforce'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'payback' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'payback'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'enchanted' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'enchanted'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'freezing_field' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'freezing_field'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'burning_field' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'burning_field'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'gravity_field' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'gravity_field'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'magnetism' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'magnetism'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'insurance' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'insurance'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'dividends' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'dividends'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'berserking' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'berserking'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'unwavering_stance' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'unwavering_stance'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'unrelenting_stance' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'unrelenting_stance'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'blessing' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'blessing'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'haste' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'haste'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'divine_barrage' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'divine_barrage'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'orbitism' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'orbitism'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'psyker_orbs' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'psyker_orbs'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'psychosense' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'psychosense'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'psychosink' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'psychosink'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'rearm' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'rearm'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'taunt' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'taunt'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'construct_instability' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'construct_instability'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'intimidation' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'intimidation'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'vulnerability' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'vulnerability'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'temporal_chains' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'temporal_chains'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'ceremonial_dagger' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'ceremonial_dagger'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'homing_barrage' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'homing_barrage'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'critical_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'critical_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'noxious_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'noxious_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'infesting_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'infesting_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'kinetic_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'kinetic_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'burning_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'burning_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'lucky_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'lucky_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'healing_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'healing_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'stunning_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'stunning_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'silencing_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'silencing_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'warping_shots' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'warping_shots'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'culling_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'culling_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'lightning_strike' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'lightning_strike'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'psycholeak' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'psycholeak'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'divine_blessing' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'divine_blessing'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'hardening' }],
          init: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'Image' },
              arguments: [{ type: 'StringLiteral', value: null, raw: "'hardening'" }],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'class_colors' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warrior'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ranger'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'healer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mage'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'nuker'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'rogue'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psyker'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'fg' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'curser'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'purple' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'forcer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'voider'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'purple' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'explorer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'fg' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'class_color_strings' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warrior'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ranger'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'healer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'nuker'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'rogue'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psyker'" },
                  value: { type: 'StringLiteral', value: null, raw: "'fg'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'curser'" },
                  value: { type: 'StringLiteral', value: null, raw: "'purple'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'forcer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'voider'" },
                  value: { type: 'StringLiteral', value: null, raw: "'purple'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'explorer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'fg'" },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_names' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Vagrant'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Swordsman'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Wizard'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Magician'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Archer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Scout'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Cleric'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Outlaw'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Blade'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Elementor'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Saboteur'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Bomber'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Stormweaver'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Sage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Squire'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Cannoneer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Dual Gunner'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Hunter'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Sentry'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Chronomancer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Spellblade'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Psykeeper'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Engineer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Plague Doctor'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Barbarian'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Juggernaut'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Lich'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Cryomancer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Pyromancer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Corruptor'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Beastmaster'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Launcher'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Jester'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Assassin'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Host'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Carver'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Bane'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Psykino'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Barrager'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Highlander'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Fairy'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Priest'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Infestor'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Flagellant'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Arcanist'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Illusionist'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Artificer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Witch'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Silencer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Vulcanist'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Warden'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Psychic'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Miner'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Merchant'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Usurer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Gambler'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Thief'" },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_colors' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'fg' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'purple' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'fg' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'purple' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'purple' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'purple' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'fg' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'green' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'orange' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'fg' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'purple' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'blue2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'fg' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'purple' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'yellow2' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: {
                    type: 'IndexExpression',
                    base: { type: 'Identifier', name: 'red' },
                    index: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_color_strings' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'fg'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'purple'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: { type: 'StringLiteral', value: null, raw: "'fg'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'purple'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: { type: 'StringLiteral', value: null, raw: "'purple'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: { type: 'StringLiteral', value: null, raw: "'purple'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: { type: 'StringLiteral', value: null, raw: "'fg'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: { type: 'StringLiteral', value: null, raw: "'green'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'orange'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'fg'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: { type: 'StringLiteral', value: null, raw: "'purple'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'blue2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: { type: 'StringLiteral', value: null, raw: "'fg'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'purple'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: { type: 'StringLiteral', value: null, raw: "'yellow2'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: { type: 'StringLiteral', value: null, raw: "'red'" },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_classes' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'explorer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psyker'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'warrior'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'ranger'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rogue'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'healer'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'warrior'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rogue'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'warrior'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'conjurer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'forcer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'warrior'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'ranger'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'ranger'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rogue'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'ranger'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'conjurer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rogue'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'healer'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psyker'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'conjurer'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'voider'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'curser'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'warrior'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'forcer'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'warrior'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'voider'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'voider'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'ranger'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'swarmer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rogue'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'swarmer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'curser'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'forcer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'curser'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rogue'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rogue'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'voider'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'swarmer'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'healer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'curser'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'voider'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'mage'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psyker'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'forcer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'ranger'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'forcer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'warrior'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'healer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'healer'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'curser'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'swarmer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psyker'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'sorcerer'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'conjurer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'voider'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'curser'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'nuker'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'forcer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psyker'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'curser'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'voider'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'sorcerer'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rogue'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_class_strings' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[fg]Explorer, Psyker'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Warrior'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage, [red]Nuker'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Ranger'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Rogue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Healer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Warrior, [red]Rogue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Warrior, [red]Nuker'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage, [red]Nuker'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Nuker, [orange]Builder'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Enchanter'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Nuker, [yellow]Forcer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Warrior, [blue]Enchanter'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Ranger, [red]Nuker'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Ranger, [red]Rogue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Ranger, [orange]Builder'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage, Enchanter'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage, [red]Rogue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Healer, [fg]Psyker'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Builder'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Nuker, [purple]Voider'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Curser, [yellow]Warrior'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Forcer, Warrior'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage, [purple]Voider'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage, [red]Nuker, [purple]Voider'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Ranger, [orange]Swarmer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Rogue, [orange]Swarmer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Forcer, [purple]Curser'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Curser, [red]Rogue'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Rogue, [purple]Voider'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Swarmer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Builder, [green]Healer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Curser, Voider'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Mage, [fg]Psyker, [yellow]Forcer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Ranger, [yellow]Forcer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Warrior'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Enchanter, [green]Healer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Healer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Curser, [orange]Swarmer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[fg]Psyker, [blue]Enchanter'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Sorcerer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Sorcerer, [orange]Builder'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Sorcerer, [purple]Voider'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Sorcerer, [purple]Curser'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Sorcerer, [red]Nuker'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Sorcerer, [yellow]Forcer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Sorcerer, [fg]Psyker'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow2]Mercenary'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow2]Mercenary'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[purple]Curser, [yellow2]Mercenary, [purple]Voider'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow2]Mercenary, [blue2]Sorcerer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Rogue, [yellow2]Mercenary'" },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'get_character_stat_string' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [
                { type: 'Identifier', name: 'character' },
                { type: 'Identifier', name: 'level' },
              ],
              body: [
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'group' }],
                  init: [
                    {
                      type: 'CallExpression',
                      base: {
                        type: 'MemberExpression',
                        indexer: ':',
                        identifier: { type: 'Identifier', name: 'set_as_physics_world' },
                        base: {
                          type: 'CallExpression',
                          base: { type: 'Identifier', name: 'Group' },
                          arguments: [],
                        },
                      },
                      arguments: [
                        { type: 'NumericLiteral', value: 32, raw: '32' },
                        { type: 'NumericLiteral', value: 0, raw: '0' },
                        { type: 'NumericLiteral', value: 0, raw: '0' },
                        {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableValue',
                              value: { type: 'StringLiteral', value: null, raw: "'player'" },
                            },
                            {
                              type: 'TableValue',
                              value: { type: 'StringLiteral', value: null, raw: "'enemy'" },
                            },
                            {
                              type: 'TableValue',
                              value: { type: 'StringLiteral', value: null, raw: "'projectile'" },
                            },
                            {
                              type: 'TableValue',
                              value: { type: 'StringLiteral', value: null, raw: "'enemy_projectile'" },
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'player' }],
                  init: [
                    {
                      type: 'TableCallExpression',
                      base: { type: 'Identifier', name: 'Player' },
                      arguments: {
                        type: 'TableConstructorExpression',
                        fields: [
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'group' },
                            value: { type: 'Identifier', name: 'group' },
                          },
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'leader' },
                            value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                          },
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'character' },
                            value: { type: 'Identifier', name: 'character' },
                          },
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'level' },
                            value: { type: 'Identifier', name: 'level' },
                          },
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'follower_index' },
                            value: { type: 'NumericLiteral', value: 1, raw: '1' },
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  type: 'CallStatement',
                  expression: {
                    type: 'CallExpression',
                    base: {
                      type: 'MemberExpression',
                      indexer: ':',
                      identifier: { type: 'Identifier', name: 'update' },
                      base: { type: 'Identifier', name: 'player' },
                    },
                    arguments: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                  },
                },
                {
                  type: 'ReturnStatement',
                  arguments: [
                    {
                      type: 'BinaryExpression',
                      operator: '..',
                      left: { type: 'StringLiteral', value: null, raw: "'[red]HP: [red]'" },
                      right: {
                        type: 'BinaryExpression',
                        operator: '..',
                        left: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'max_hp' },
                          base: { type: 'Identifier', name: 'player' },
                        },
                        right: {
                          type: 'BinaryExpression',
                          operator: '..',
                          left: { type: 'StringLiteral', value: null, raw: "'[fg], [red]DMG: [red]'" },
                          right: {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'MemberExpression',
                              indexer: '.',
                              identifier: { type: 'Identifier', name: 'dmg' },
                              base: { type: 'Identifier', name: 'player' },
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: { type: 'StringLiteral', value: null, raw: "'[fg], [green]ASPD: [green]'" },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: {
                                  type: 'CallExpression',
                                  base: {
                                    type: 'MemberExpression',
                                    indexer: '.',
                                    identifier: { type: 'Identifier', name: 'round' },
                                    base: { type: 'Identifier', name: 'math' },
                                  },
                                  arguments: [
                                    {
                                      type: 'MemberExpression',
                                      indexer: '.',
                                      identifier: { type: 'Identifier', name: 'aspd_m' },
                                      base: { type: 'Identifier', name: 'player' },
                                    },
                                    { type: 'NumericLiteral', value: 2, raw: '2' },
                                  ],
                                },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'StringLiteral',
                                    value: null,
                                    raw: "'x[fg], [blue]AREA: [blue]'",
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'round' },
                                        base: { type: 'Identifier', name: 'math' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '*',
                                          left: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'area_dmg_m' },
                                            base: { type: 'Identifier', name: 'player' },
                                          },
                                          right: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'area_size_m' },
                                            base: { type: 'Identifier', name: 'player' },
                                          },
                                        },
                                        { type: 'NumericLiteral', value: 2, raw: '2' },
                                      ],
                                    },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'StringLiteral',
                                        value: null,
                                        raw: "'x[fg], [yellow]DEF: [yellow]'",
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'CallExpression',
                                          base: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'round' },
                                            base: { type: 'Identifier', name: 'math' },
                                          },
                                          arguments: [
                                            {
                                              type: 'MemberExpression',
                                              indexer: '.',
                                              identifier: { type: 'Identifier', name: 'def' },
                                              base: { type: 'Identifier', name: 'player' },
                                            },
                                            { type: 'NumericLiteral', value: 2, raw: '2' },
                                          ],
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "'[fg], [green]MVSPD: [green]'",
                                          },
                                          right: {
                                            type: 'BinaryExpression',
                                            operator: '..',
                                            left: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'round' },
                                                base: { type: 'Identifier', name: 'math' },
                                              },
                                              arguments: [
                                                {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'v' },
                                                  base: { type: 'Identifier', name: 'player' },
                                                },
                                                { type: 'NumericLiteral', value: 2, raw: '2' },
                                              ],
                                            },
                                            right: { type: 'StringLiteral', value: null, raw: "'[fg]'" },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'get_character_stat' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [
                { type: 'Identifier', name: 'character' },
                { type: 'Identifier', name: 'level' },
                { type: 'Identifier', name: 'stat' },
              ],
              body: [
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'group' }],
                  init: [
                    {
                      type: 'CallExpression',
                      base: {
                        type: 'MemberExpression',
                        indexer: ':',
                        identifier: { type: 'Identifier', name: 'set_as_physics_world' },
                        base: {
                          type: 'CallExpression',
                          base: { type: 'Identifier', name: 'Group' },
                          arguments: [],
                        },
                      },
                      arguments: [
                        { type: 'NumericLiteral', value: 32, raw: '32' },
                        { type: 'NumericLiteral', value: 0, raw: '0' },
                        { type: 'NumericLiteral', value: 0, raw: '0' },
                        {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableValue',
                              value: { type: 'StringLiteral', value: null, raw: "'player'" },
                            },
                            {
                              type: 'TableValue',
                              value: { type: 'StringLiteral', value: null, raw: "'enemy'" },
                            },
                            {
                              type: 'TableValue',
                              value: { type: 'StringLiteral', value: null, raw: "'projectile'" },
                            },
                            {
                              type: 'TableValue',
                              value: { type: 'StringLiteral', value: null, raw: "'enemy_projectile'" },
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'player' }],
                  init: [
                    {
                      type: 'TableCallExpression',
                      base: { type: 'Identifier', name: 'Player' },
                      arguments: {
                        type: 'TableConstructorExpression',
                        fields: [
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'group' },
                            value: { type: 'Identifier', name: 'group' },
                          },
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'leader' },
                            value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                          },
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'character' },
                            value: { type: 'Identifier', name: 'character' },
                          },
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'level' },
                            value: { type: 'Identifier', name: 'level' },
                          },
                          {
                            type: 'TableKeyString',
                            key: { type: 'Identifier', name: 'follower_index' },
                            value: { type: 'NumericLiteral', value: 1, raw: '1' },
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  type: 'CallStatement',
                  expression: {
                    type: 'CallExpression',
                    base: {
                      type: 'MemberExpression',
                      indexer: ':',
                      identifier: { type: 'Identifier', name: 'update' },
                      base: { type: 'Identifier', name: 'player' },
                    },
                    arguments: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                  },
                },
                {
                  type: 'ReturnStatement',
                  arguments: [
                    {
                      type: 'CallExpression',
                      base: {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'round' },
                        base: { type: 'Identifier', name: 'math' },
                      },
                      arguments: [
                        {
                          type: 'IndexExpression',
                          base: { type: 'Identifier', name: 'player' },
                          index: { type: 'Identifier', name: 'stat' },
                        },
                        { type: 'NumericLiteral', value: 2, raw: '2' },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_descriptions' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]shoots a projectile that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]deals [yellow]'" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: {
                                  type: 'StringLiteral',
                                  value: null,
                                  raw: "'[fg] damage in an area, deals extra [yellow]'",
                                },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: {
                                      type: 'MemberExpression',
                                      indexer: '.',
                                      identifier: { type: 'Identifier', name: 'round' },
                                      base: { type: 'Identifier', name: 'math' },
                                    },
                                    arguments: [
                                      {
                                        type: 'BinaryExpression',
                                        operator: '*',
                                        left: {
                                          type: 'CallExpression',
                                          base: { type: 'Identifier', name: 'get_character_stat' },
                                          arguments: [
                                            { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                                            { type: 'Identifier', name: 'lvl' },
                                            { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                          ],
                                        },
                                        right: { type: 'NumericLiteral', value: 0.15, raw: '0.15' },
                                      },
                                      { type: 'NumericLiteral', value: 2, raw: '2' },
                                    ],
                                  },
                                  right: {
                                    type: 'StringLiteral',
                                    value: null,
                                    raw: "'[fg] damage per unit hit'",
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]shoots a projectile that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'wizard'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]creates a small area that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'magician'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]shoots an arrow that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'archer'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage and pierces'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]throws a knife that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'scout'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage and chains [yellow]3[fg] times'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates [yellow]1[fg] healing orb every [yellow]8[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]throws a fan of [yellow]5[fg] knives, each dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]throws multiple blades that deal [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'blade'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]deals [yellow]'" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'elementor'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "' AoE[fg] damage in a large area centered on a random target'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]calls [yellow]2[fg] saboteurs to seek targets and deal [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]plants a bomb, when it explodes it deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 2, raw: '2' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'bomber'" },
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]infuses projectiles with chain lightning that deals [yellow]20%[fg] damage to [yellow]2[fg] enemies'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]shoots a slow projectile that draws enemies in'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+20%[fg] damage and defense to all allies'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]shoots a projectile that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 2, raw: '2' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]shoots two parallel projectiles, each dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]shoots an arrow that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'hunter'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage and has a [yellow]20%[fg] chance to summon a pet'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]spawns a rotating turret that shoots [yellow]4[fg] projectiles, each dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'sentry'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+20%[fg] attack speed to all allies'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]throws knives that deal [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage, pierce and spiral outwards'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates [yellow]3[fg] healing orbs every time the psykeeper takes [yellow]25%[fg] of its max HP in damage'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]drops turrets that shoot bursts of projectiles, each dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'engineer'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]creates an area that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]deals [yellow]'" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] AoE damage and stuns enemies hit for [yellow]4[fg] seconds'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]deals [yellow]'" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] AoE damage and pushes enemies away with a strong force'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]launches a slow projectile that jumps [yellow]7[fg] times, dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 2, raw: '2' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'lich'" },
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per hit'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]nearby enemies take [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]nearby enemies take [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]shoots an arrow that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage, spawn [yellow]3[fg] critters if it kills'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]throws a knife that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage, spawn [yellow]2[fg] critters if it crits'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]all nearby enemies are pushed after [yellow]4[fg] seconds, taking [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 2, raw: '2' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'launcher'" },
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage on wall hit'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[fg]curses [yellow]6[fg] nearby enemies for [yellow]6[fg] seconds, they will explode into [yellow]4[fg] knives on death"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]throws a piercing knife that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'assassin'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'[fg] damage + [yellow]'" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'BinaryExpression',
                                    operator: '/',
                                    left: {
                                      type: 'CallExpression',
                                      base: { type: 'Identifier', name: 'get_character_stat' },
                                      arguments: [
                                        { type: 'StringLiteral', value: null, raw: "'assassin'" },
                                        { type: 'Identifier', name: 'lvl' },
                                        { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                      ],
                                    },
                                    right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                  },
                                  right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per second'" },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]periodically spawn [yellow]1[fg] small critter'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]carves a statue that creates [yellow]1[fg] healing orb every [yellow]6[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]curses [yellow]6[fg] nearby enemies for [yellow]6[fg] seconds, they will create small void rifts on death'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]pulls enemies together for [yellow]2[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]shoots a barrage of [yellow]3[fg] arrows, each dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'barrager'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage and pushing enemies'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]deals [yellow]'" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 5, raw: '5' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'highlander'" },
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] AoE damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates [yellow]1[fg] healing orb and grants [yellow]1[fg] unit [yellow]+100%[fg] attack speed for [yellow]6[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates [yellow]3[fg] healing orbs every [yellow]12[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]curses [yellow]8[fg] nearby enemies for [yellow]6[fg] seconds, they will release [yellow]2[fg] critters on death'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]deals [yellow]'" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 2, raw: '2' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage to self and grants [yellow]+4%[fg] damage to all allies per cast'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]launches a slow moving orb that launches projectiles, each dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]launches a projectile that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage and creates copies that do the same'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]spawns an automaton that shoots a projectile that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'artificer'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]creates an area that ricochets and deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'witch'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]curses [yellow]5[fg] nearby enemies for [yellow]6[fg] seconds, preventing them from using special attacks'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]creates a volcano that explodes the nearby area [yellow]4[fg] times, dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE [fg]damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates a force field around a random unit that prevents enemies from entering'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]creates a small area that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'psychic'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]picking up gold releases [yellow]4[fg] homing projectiles that each deal [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'miner'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' [fg]damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]gain [yellow]+1[fg] interest for every [yellow]10[fg] gold, up to a max of [yellow]+10[fg] from the merchant'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]curses [yellow]3[fg] nearby enemies indefinitely with debt, dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'usurer'" },
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]deal [yellow]2X[fg] damage to a single random enemy where X is how much gold you have'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]throws a knife that deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 2, raw: '2' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'thief'" },
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage and chains [yellow]5[fg] times'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_effect_names' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[fg]Experience'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Cleave'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Magic Missile'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Quick Cast'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Bounce Shot'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Dagger Resonance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Mass Heal'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Flying Daggers'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Blade Resonance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Windfield'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Demoman'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Demoman'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Wide Lightning'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Dimension Compression'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Shiny Gear'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Cannon Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Gun Kata'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Feral Pack'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Sentry Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Quicken'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Spiralism'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[fg]Crucio'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Upgrade!!!'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Black Death Steam'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Seism'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Brutal Impact'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Chain Frost'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue]Frostbite'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Ignite'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Corruption'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Call of the Wild'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Kineticism'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: { type: 'StringLiteral', value: null, raw: '"[red]Pandemonium"' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Toxic Delivery'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Invasion'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]World Tree'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Nightmare'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[fg]Magnetic Force'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Moulinet'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Whimsy'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[green]Divine Intervention'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[orange]Infestation'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Zealotry'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Arcane Orb'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Mirror Image'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Spell Formula Efficiency'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Death Pool'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[blue2]Arcane Curse'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Lava Burst'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]Magnetic Field'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[fg]Mental Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow2]Golden Bolts'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow2]Item Shop'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[purple]Bankruptcy'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow2]Multicast'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[red]Ultrakill'" },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_effect_names_gray' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Experience'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Cleave'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Magic Missile'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Quick Cast'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Bounce Shot'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Dagger Resonance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Mass Heal '" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Flying Daggers'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Blade Resonance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Windfield'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Demoman'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Demoman'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Wide Lightning'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Dimension Compression'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Shiny Gear'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Cannon Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Gun Kata'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Feral Pack'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Sentry Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Quicken'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Spiralism'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Crucio'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Upgrade!!!'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Black Death Steam'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Seism'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Brutal Impact'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Chain Frost'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Frostbite'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Ignite'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Corruption'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Call of the Wild'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Kineticism'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: { type: 'StringLiteral', value: null, raw: '"[light_bg]Pandemonium"' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Toxic Delivery'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Invasion'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]World Tree'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Nightmare'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Magnetic Force'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Moulinet'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Whimsy'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Divine Intervention'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Infestation'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Zealotry'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Arcane Orb'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Mirror Image'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Spell Formula Efficiency'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Death Pool'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Arcane Curse'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Lava Burst'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Magnetic Field'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Mental Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Golden Bolts'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Item Shop'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Bankruptcy'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Multicast'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[light_bg]Ultrakill'" },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_effect_descriptions' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+15%[fg] attack speed and damage per active class'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[fg]the swordsman\'s damage is [yellow]doubled"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]the projectile chains [yellow]2[fg] times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+50%[[fg] attack speed every [yellow]12[fg] seconds for [yellow]6[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]the arrow ricochets off walls [yellow]3[fg] times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+25%[fg] damage per chain and [yellow]+3[fg] chains'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates [yellow]4[fg] healing orbs every [yellow]8[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[yellow]+50%[fg] outlaw attack speed and his knives seek enemies"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]deal additional [yellow]'" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'round' },
                                  base: { type: 'Identifier', name: 'math' },
                                },
                                arguments: [
                                  {
                                    type: 'BinaryExpression',
                                    operator: '/',
                                    left: {
                                      type: 'CallExpression',
                                      base: { type: 'Identifier', name: 'get_character_stat' },
                                      arguments: [
                                        { type: 'StringLiteral', value: null, raw: "'blade'" },
                                        { type: 'NumericLiteral', value: 3, raw: '3' },
                                        { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                      ],
                                    },
                                    right: { type: 'NumericLiteral', value: 3, raw: '3' },
                                  },
                                  { type: 'NumericLiteral', value: 2, raw: '2' },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per enemy hit'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]slows enemies by [yellow]60%[fg] for [yellow]6[fg] seconds on hit'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]the explosion has [yellow]50%[fg] chance to crit, increasing in size and dealing [yellow]2x[fg] damage'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'StringLiteral', value: null, raw: "'[yellow]+100%[fg] bomb area and damage'" },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[fg]chain lightning\'s trigger area of effect and number of units hit is [yellow]doubled"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]when the projectile expires deal [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 3, raw: '3' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'sage'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage to all enemies under its influence'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+30%[fg] damage, attack speed, movement speed and defense to all allies'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]showers the hit area in [yellow]7[fg] additional cannon shots that deal [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '/',
                                left: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] AoE damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]every 5th attack shoot in rapid succession for [yellow]2[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]summons [yellow]3[fg] pets and the pets ricochet off walls once'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+50%[fg] sentry turret attack speed and the projectiles ricochet [yellow]twice[fg]'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]enemies take damage over time [yellow]50%[fg] faster'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]faster projectile speed and tighter turns'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]deal [yellow]double[fg] the damage taken by the psykeeper to all enemies'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]drops [yellow]2[fg] additional turrets and grants all turrets [yellow]+50%[fg] damage and attack speed'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]nearby enemies take an additional [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                                  { type: 'NumericLiteral', value: 3, raw: '3' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]stunned enemies also take [yellow]100%[fg] increased damage'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]enemies pushed by the juggernaut take [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 4, raw: '4' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage if they hit a wall'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]chain frost slows enemies hit by [yellow]80%[fg] for [yellow]2[fg] seconds and chains [yellow]+7[fg] times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]enemies are also slowed by [yellow]60%[fg] while in the area'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]enemies killed by the pyromancer explode, dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                                  { type: 'NumericLiteral', value: 3, raw: '3' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] AoE damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]spawn [yellow]2[fg] small critters if the corruptor hits an enemy'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]spawn [yellow]4[fg] small critters if the beastmaster gets hit'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]enemies launched take [yellow]300%[fg] more damage when they hit walls'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]all knives seek enemies and pierce [yellow]2[fg] times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]poison inflicted from crits deals [yellow]8x[fg] damage'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg][yellow]+100%[fg] critter spawn rate and spawn [yellow]2[fg] critters instead'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]carves a tree that creates healing orbs [yellow]twice[fg] as fast'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[yellow]100%[fg] increased area for bane\'s void rifts"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]enemies take [yellow]'" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 4, raw: '4' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'psykino'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage and are pushed away when the area expires'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]every 3rd attack the barrage shoots [yellow]15[fg] projectiles and they push harder'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]quickly repeats the attack [yellow]3[fg] times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates [yellow]2[fg] healing orbs and grants [yellow]2[fg] units [yellow]+100%[fg] attack speed'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]picks [yellow]3[fg] units at random and grants them a buff that prevents death once'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg][yellow]triples[fg] the number of critters released'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]2X[fg] flagellant max HP and grants [yellow]+12%[fg] damage to all allies per cast instead'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+50%[fg] attack speed for the orb and [yellow]2[fg] projectiles are released per cast'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]doubles[fg] the number of copies created and they release [yellow]12[fg] projectiles on death'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]automatons shoot and move 50% faster and release [yellow]12[fg] projectiles on death'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]the area releases projectiles, each dealing [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'witch'" },
                                  { type: 'NumericLiteral', value: 3, raw: '3' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage and chaining once'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]the curse also deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'silencer'" },
                                  { type: 'NumericLiteral', value: 3, raw: '3' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]the number and speed of explosions is [yellow]doubled[fg]'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates the force field around [yellow]2[fg] units'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]the attack can happen from any distance and repeats once'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]release [yellow]8[fg] homing projectiles instead and they pierce twice'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]your first item reroll is always free'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]if the same enemy is cursed [yellow]3[fg] times it takes [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 10, raw: '10' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'usurer'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "'[fg] damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]60/40/20%[fg] chance to cast the attack [yellow]2/3/4[fg] times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]if the knife crits it deals [yellow]'",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 10, raw: '10' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'thief'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'[fg] damage, chains [yellow]10[fg] times and grants [yellow]1[fg] gold'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_effect_descriptions_gray' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]+15% attack speed and damage per active class'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[light_bg]the swordsman\'s damage is doubled"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'StringLiteral', value: null, raw: "'[light_bg]the projectile chains 3 times'" },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]+50% attack speed every 12 seconds for 6 seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]the arrow ricochets off walls 3 times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]+25% damage per chain and +3 chains'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [{ type: 'StringLiteral', value: null, raw: "'[light_bg]creates 4 healing orbs'" }],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[light_bg]+50% outlaw attack speed and his knives seek enemies"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[light_bg]deal additional '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'round' },
                                  base: { type: 'Identifier', name: 'math' },
                                },
                                arguments: [
                                  {
                                    type: 'BinaryExpression',
                                    operator: '/',
                                    left: {
                                      type: 'CallExpression',
                                      base: { type: 'Identifier', name: 'get_character_stat' },
                                      arguments: [
                                        { type: 'StringLiteral', value: null, raw: "'blade'" },
                                        { type: 'NumericLiteral', value: 3, raw: '3' },
                                        { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                      ],
                                    },
                                    right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                  },
                                  { type: 'NumericLiteral', value: 2, raw: '2' },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage per enemy hit'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]slows enemies by 60% for 6 seconds on hit'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]the explosion has 50% chance to crit, increasing in size and dealing 2x damage'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'StringLiteral', value: null, raw: "'[light_bg]+100% bomb area and damage'" },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[light_bg]chain lightning\'s trigger area of effect and number of units hit is doubled"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]when the projectile expires deal '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 3, raw: '3' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'sage'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "' damage to all enemies under its influence'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]+30% damage, attack speed, movement speed and defense to all allies'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]showers the hit area in 7 additional cannon shots that deal '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '/',
                                left: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]every 5th attack shoot in rapid succession for 2 seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]summons 3 pets and the pets ricochet off walls once'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]+50% sentry turret attack speed and the projectiles ricochet twice'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]enemies take damage over time 50% faster'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]faster projectile speed and tighter turns'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]deal double the damage taken by the psykeeper to all enemies'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]drops 2 additional turrets and grants all turrets +50% damage and attack speed'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]nearby enemies take an additional '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                                  { type: 'NumericLiteral', value: 3, raw: '3' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]stunned enemies also take 100% increased damage'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]enemies pushed by the juggernaut take '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 4, raw: '4' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage if they hit a wall'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]chain frost slows enemies hit by 80% for 2 seconds and chains +7 times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]enemies are also slowed by 60% while in the area'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]enemies killed by the pyromancer explode, dealing '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                                  { type: 'NumericLiteral', value: 3, raw: '3' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]spawn 2 small critters if the corruptor hits an enemy'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]spawn 4 small critters if the beastmaster gets hit'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]enemies launched take 300% more damage when they hit walls'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]curses 6 enemies and all knives seek enemies and pierce 2 times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]poison inflicted from crits deals 8x damage'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]+100% critter spawn rate and spawn 2 critters instead'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]carves a tree that creates healing orbs twice as fast'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[light_bg]100% increased area for bane\'s void rifts"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[light_bg]enemies take '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 4, raw: '4' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'psykino'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "' damage and are pushed away when the area expires'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]every 3rd attack the barrage shoots 15 projectiles and they push harder'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]quickly repeats the attack 3 times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]creates 2 healing orbs and grants 2 units +100% attack speed'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]picks 3 units at random and grants them a buff that prevents death once'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]triples the number of critters released'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]2X flagellant max HP and grants +12% damage to all allies per cast instead'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]+50% attack speed for the orb and 2 projectiles are released per cast'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]doubles the number of copies created and they release 12 projectiles on death'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]automatons shoot and move 50% faster and release 12 projectiles on death'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]the area periodically releases projectiles, each dealing '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'witch'" },
                                  { type: 'NumericLiteral', value: 3, raw: '3' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage and chaining once'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]the curse also deals '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'get_character_stat' },
                                arguments: [
                                  { type: 'StringLiteral', value: null, raw: "'silencer'" },
                                  { type: 'NumericLiteral', value: 3, raw: '3' },
                                  { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]the number and speed of explosions is doubled'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]creates the force field around 2 units'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]the attack can happen from any distance and repeats once'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]release 8 homing projectiles instead and they pierce twice'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]your first item reroll is always free'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]if the same enemy is cursed 3 times it takes '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 10, raw: '10' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'usurer'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[light_bg]60/40/20% chance to cast the attack 2/3/4 times'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[light_bg]if the knife crits it deals '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 10, raw: '10' },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'get_character_stat' },
                                  arguments: [
                                    { type: 'StringLiteral', value: null, raw: "'thief'" },
                                    { type: 'NumericLiteral', value: 3, raw: '3' },
                                    { type: 'StringLiteral', value: null, raw: "'dmg'" },
                                  ],
                                },
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "' damage, chains 10 times and grants 1 gold'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_stats' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'wizard'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'magician'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'archer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'scout'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'cleric'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'blade'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'elementor'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'bomber'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'sage'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'squire'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'hunter'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'sentry'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'engineer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lich'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'lich'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'launcher'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'launcher'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'jester'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'assassin'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'host'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'carver'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'bane'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'psykino'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'barrager'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'highlander'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'fairy'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'priest'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'infestor'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'artificer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'witch'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'silencer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'warden'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'psychic'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'miner'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'merchant'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'usurer'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'gambler'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'get_character_stat_string' },
                            arguments: [
                              { type: 'StringLiteral', value: null, raw: "'thief'" },
                              { type: 'Identifier', name: 'lvl' },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'class_stat_multipliers' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ranger'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1.5, raw: '1.5' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 0.9, raw: '0.9' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warrior'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1.4, raw: '1.4' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1.1, raw: '1.1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 0.9, raw: '0.9' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1.25, raw: '1.25' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 0.9, raw: '0.9' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mage'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 0.6, raw: '0.6' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1.4, raw: '1.4' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1.25, raw: '1.25' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'rogue'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 0.8, raw: '0.8' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1.3, raw: '1.3' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1.1, raw: '1.1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 0.6, raw: '0.6' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 0.6, raw: '0.6' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 0.8, raw: '0.8' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1.4, raw: '1.4' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'healer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'nuker'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 0.9, raw: '0.9' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1.5, raw: '1.5' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1.5, raw: '1.5' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psyker'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1.5, raw: '1.5' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'curser'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'forcer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1.25, raw: '1.25' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1.1, raw: '1.1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 0.9, raw: '0.9' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1.25, raw: '1.25' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'voider'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1.3, raw: '1.3' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 0.8, raw: '0.8' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 0.75, raw: '0.75' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 0.6, raw: '0.6' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 0.8, raw: '0.8' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 0.8, raw: '0.8' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1.3, raw: '1.3' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1.2, raw: '1.2' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 0.8, raw: '0.8' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'explorer'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1.25, raw: '1.25' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'seeker'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 0.3, raw: '0.3' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mini_boss'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 0.3, raw: '0.3' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enemy_critter'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'saboteur'" },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'hp' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'aspd' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_dmg' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'area_size' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'def' },
                        value: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      {
                        type: 'TableKeyString',
                        key: { type: 'Identifier', name: 'mvspd' },
                        value: { type: 'NumericLiteral', value: 1.4, raw: '1.4' },
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'ylb1' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [{ type: 'Identifier', name: 'lvl' }],
              body: [
                {
                  type: 'IfStatement',
                  clauses: [
                    {
                      type: 'IfClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 3, raw: '3' },
                      },
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'light_bg'" }],
                        },
                      ],
                    },
                    {
                      type: 'ElseifClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                      },
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'light_bg'" }],
                        },
                      ],
                    },
                    {
                      type: 'ElseifClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'yellow'" }],
                        },
                      ],
                    },
                    {
                      type: 'ElseClause',
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'light_bg'" }],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'ylb2' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [{ type: 'Identifier', name: 'lvl' }],
              body: [
                {
                  type: 'IfStatement',
                  clauses: [
                    {
                      type: 'IfClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 3, raw: '3' },
                      },
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'light_bg'" }],
                        },
                      ],
                    },
                    {
                      type: 'ElseifClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                      },
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'yellow'" }],
                        },
                      ],
                    },
                    {
                      type: 'ElseClause',
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'light_bg'" }],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'ylb3' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [{ type: 'Identifier', name: 'lvl' }],
              body: [
                {
                  type: 'IfStatement',
                  clauses: [
                    {
                      type: 'IfClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 3, raw: '3' },
                      },
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'yellow'" }],
                        },
                      ],
                    },
                    {
                      type: 'ElseClause',
                      body: [
                        {
                          type: 'ReturnStatement',
                          arguments: [{ type: 'StringLiteral', value: null, raw: "'light_bg'" }],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'class_descriptions' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ranger'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']3[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']6 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: { type: 'StringLiteral', value: null, raw: "']8%[light_bg]/['" },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']16% [fg]chance to release a barrage on attack to allied rangers'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warrior'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']3[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']6 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: { type: 'StringLiteral', value: null, raw: "']+25[light_bg]/['" },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+50 [fg]defense to allied warriors'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']3[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']6 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: { type: 'StringLiteral', value: null, raw: "']-15[light_bg]/['" },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']-30 [fg]enemy defense'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'rogue'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']3[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']6 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: { type: 'StringLiteral', value: null, raw: "']15%[light_bg]/['" },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']30% [fg]chance to crit to allied rogues, dealing [yellow]4x[] damage'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'healer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'StringLiteral',
                                          value: null,
                                          raw: "']+15%[light_bg]/['",
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+30% [fg] chance to create [yellow]+1[fg] healing orb on healing orb creation'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'StringLiteral',
                                          value: null,
                                          raw: "']+15%[light_bg]/['",
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+25% [fg]damage to all allies'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'nuker'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']3[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']6 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'StringLiteral',
                                          value: null,
                                          raw: "']+15%[light_bg]/['",
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+25% [fg]area damage and size to allied nukers'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'StringLiteral',
                                          value: null,
                                          raw: "']+25%[light_bg]/['",
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+50% [fg]construct damage and duration'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psyker'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: { type: 'StringLiteral', value: null, raw: "']+2[light_bg]/['" },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+4 [fg]total psyker orbs and [yellow]+1[fg] orb for each psyker'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'curser'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: { type: 'StringLiteral', value: null, raw: "']+1[light_bg]/['" },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+3 [fg]max curse targets to allied cursers'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'forcer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'StringLiteral',
                                          value: null,
                                          raw: "']+25%[light_bg]/['",
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+50% [fg]knockback force to all allies'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: { type: 'StringLiteral', value: null, raw: "']+1[light_bg]/['" },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+3 [fg]hits to critters'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'voider'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'StringLiteral',
                                          value: null,
                                          raw: "']+20%[light_bg]/['",
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+40% [fg]damage over time to allied voiders'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4[light_bg]/['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb3' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'StringLiteral',
                                          value: null,
                                          raw: "']6 [fg]- sorcerers repeat their attacks once every ['",
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb1' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'BinaryExpression',
                                            operator: '..',
                                            left: {
                                              type: 'StringLiteral',
                                              value: null,
                                              raw: "']4[light_bg]/['",
                                            },
                                            right: {
                                              type: 'BinaryExpression',
                                              operator: '..',
                                              left: {
                                                type: 'CallExpression',
                                                base: { type: 'Identifier', name: 'ylb2' },
                                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                                              },
                                              right: {
                                                type: 'BinaryExpression',
                                                operator: '..',
                                                left: {
                                                  type: 'StringLiteral',
                                                  value: null,
                                                  raw: "']3[light_bg]/['",
                                                },
                                                right: {
                                                  type: 'BinaryExpression',
                                                  operator: '..',
                                                  left: {
                                                    type: 'CallExpression',
                                                    base: { type: 'Identifier', name: 'ylb3' },
                                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                                  },
                                                  right: {
                                                    type: 'StringLiteral',
                                                    value: null,
                                                    raw: "']2[fg] attacks'",
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'['" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ylb1' },
                                arguments: [{ type: 'Identifier', name: 'lvl' }],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "']2[light_bg]/['" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ylb2' },
                                    arguments: [{ type: 'Identifier', name: 'lvl' }],
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: { type: 'StringLiteral', value: null, raw: "']4 [fg]- ['" },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: {
                                        type: 'CallExpression',
                                        base: { type: 'Identifier', name: 'ylb1' },
                                        arguments: [{ type: 'Identifier', name: 'lvl' }],
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: { type: 'StringLiteral', value: null, raw: "']+8%[light_bg]/['" },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'ylb2' },
                                            arguments: [{ type: 'Identifier', name: 'lvl' }],
                                          },
                                          right: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "']+16% [fg]chance for enemies to drop gold on death'",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'explorer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+15%[fg] attack speed and damage per active class to allied explorers'",
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'tier_to_characters' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 1, raw: '1' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'vagrant'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'magician'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'archer'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'scout'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'cleric'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'merchant'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 2, raw: '2' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'wizard'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'bomber'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'sage'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'squire'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'sentry'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'jester'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'carver'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psychic'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'witch'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'outlaw'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'miner'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 3, raw: '3' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'host'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'bane'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'usurer'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'gambler'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 4, raw: '4' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'priest'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psykino'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'fairy'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'blade'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'warden'" } },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'thief'" } },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'non_attacking_characters' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'cleric'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'stormweaver'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'squire'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'chronomancer'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'sage'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psykeeper'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'bane'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'carver'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'fairy'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'priest'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'flagellant'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'merchant'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'miner'" } },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'non_cooldown_characters' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'squire'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'chronomancer'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psykeeper'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'merchant'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'miner'" } },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'character_tiers' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                  value: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swordsman'" },
                  value: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magician'" },
                  value: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'archer'" },
                  value: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'scout'" },
                  value: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cleric'" },
                  value: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blade'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'elementor'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bomber'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stormweaver'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sage'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'squire'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sentry'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancer'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykeeper'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'plague_doctor'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barbarian'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'juggernaut'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'cryomancer'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'pyromancer'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'jester'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'host'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'carver'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'bane'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psykino'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'highlander'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fairy'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'priest'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infestor'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flagellant'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                  value: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'witch'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencer'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulcanist'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warden'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychic'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'miner'" },
                  value: { type: 'NumericLiteral', value: 2, raw: '2' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'merchant'" },
                  value: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'usurer'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gambler'" },
                  value: { type: 'NumericLiteral', value: 3, raw: '3' },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'thief'" },
                  value: { type: 'NumericLiteral', value: 4, raw: '4' },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'launches_projectiles' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [{ type: 'Identifier', name: 'character' }],
              body: [
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'classes' }],
                  init: [
                    {
                      type: 'TableConstructorExpression',
                      fields: [
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'vagrant'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'archer'" },
                        },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'scout'" } },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'outlaw'" },
                        },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'blade'" } },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'wizard'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'cannoneer'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'dual_gunner'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'hunter'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'spellblade'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'engineer'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'corruptor'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'beastmaster'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'jester'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'assassin'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'barrager'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'arcanist'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'illusionist'" },
                        },
                        {
                          type: 'TableValue',
                          value: { type: 'StringLiteral', value: null, raw: "'artificer'" },
                        },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'miner'" } },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'thief'" } },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'sentry'" } },
                      ],
                    },
                  ],
                },
                {
                  type: 'ReturnStatement',
                  arguments: [
                    {
                      type: 'CallExpression',
                      base: {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'any' },
                        base: { type: 'Identifier', name: 'table' },
                      },
                      arguments: [
                        { type: 'Identifier', name: 'classes' },
                        {
                          type: 'FunctionDeclaration',
                          identifier: null,
                          isLocal: false,
                          parameters: [{ type: 'Identifier', name: 'v' }],
                          body: [
                            {
                              type: 'ReturnStatement',
                              arguments: [
                                {
                                  type: 'BinaryExpression',
                                  operator: '==',
                                  left: { type: 'Identifier', name: 'v' },
                                  right: { type: 'Identifier', name: 'character' },
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'get_number_of_units_per_class' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [{ type: 'Identifier', name: 'units' }],
              body: [
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'rangers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'warriors' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'healers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'mages' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'nukers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'conjurers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'rogues' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'enchanters' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'psykers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'cursers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'forcers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'swarmers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'voiders' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'sorcerers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'mercenaries' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'explorers' }],
                  init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                },
                {
                  type: 'ForGenericStatement',
                  variables: [
                    { type: 'Identifier', name: '_' },
                    { type: 'Identifier', name: 'unit' },
                  ],
                  iterators: [
                    {
                      type: 'CallExpression',
                      base: { type: 'Identifier', name: 'ipairs' },
                      arguments: [{ type: 'Identifier', name: 'units' }],
                    },
                  ],
                  body: [
                    {
                      type: 'ForGenericStatement',
                      variables: [
                        { type: 'Identifier', name: '_' },
                        { type: 'Identifier', name: 'unit_class' },
                      ],
                      iterators: [
                        {
                          type: 'CallExpression',
                          base: { type: 'Identifier', name: 'ipairs' },
                          arguments: [
                            {
                              type: 'IndexExpression',
                              base: { type: 'Identifier', name: 'character_classes' },
                              index: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'character' },
                                base: { type: 'Identifier', name: 'unit' },
                              },
                            },
                          ],
                        },
                      ],
                      body: [
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'ranger'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'rangers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'rangers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'warrior'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'warriors' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'warriors' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'healer'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'healers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'healers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'mage'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'mages' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'mages' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'nuker'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'nukers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'nukers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'conjurers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'conjurers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'rogue'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'rogues' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'rogues' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'enchanters' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'enchanters' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'psyker'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'psykers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'psykers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'curser'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'cursers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'cursers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'forcer'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'forcers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'forcers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'swarmers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'swarmers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'voider'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'voiders' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'voiders' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'sorcerers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'sorcerers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'mercenaries' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'mercenaries' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'unit_class' },
                                right: { type: 'StringLiteral', value: null, raw: "'explorer'" },
                              },
                              body: [
                                {
                                  type: 'AssignmentStatement',
                                  variables: [{ type: 'Identifier', name: 'explorers' }],
                                  init: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '+',
                                      left: { type: 'Identifier', name: 'explorers' },
                                      right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  type: 'ReturnStatement',
                  arguments: [
                    {
                      type: 'TableConstructorExpression',
                      fields: [
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'ranger' },
                          value: { type: 'Identifier', name: 'rangers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'warrior' },
                          value: { type: 'Identifier', name: 'warriors' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'healer' },
                          value: { type: 'Identifier', name: 'healers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'mage' },
                          value: { type: 'Identifier', name: 'mages' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'nuker' },
                          value: { type: 'Identifier', name: 'nukers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'conjurer' },
                          value: { type: 'Identifier', name: 'conjurers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'rogue' },
                          value: { type: 'Identifier', name: 'rogues' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'enchanter' },
                          value: { type: 'Identifier', name: 'enchanters' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'psyker' },
                          value: { type: 'Identifier', name: 'psykers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'curser' },
                          value: { type: 'Identifier', name: 'cursers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'forcer' },
                          value: { type: 'Identifier', name: 'forcers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'swarmer' },
                          value: { type: 'Identifier', name: 'swarmers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'voider' },
                          value: { type: 'Identifier', name: 'voiders' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'sorcerer' },
                          value: { type: 'Identifier', name: 'sorcerers' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'mercenary' },
                          value: { type: 'Identifier', name: 'mercenaries' },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'explorer' },
                          value: { type: 'Identifier', name: 'explorers' },
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'get_class_levels' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [{ type: 'Identifier', name: 'units' }],
              body: [
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'units_per_class' }],
                  init: [
                    {
                      type: 'CallExpression',
                      base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                      arguments: [{ type: 'Identifier', name: 'units' }],
                    },
                  ],
                },
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'units_to_class_level' }],
                  init: [
                    {
                      type: 'FunctionDeclaration',
                      identifier: null,
                      isLocal: false,
                      parameters: [
                        { type: 'Identifier', name: 'number_of_units' },
                        { type: 'Identifier', name: 'class' },
                      ],
                      body: [
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'LogicalExpression',
                                operator: 'or',
                                left: {
                                  type: 'LogicalExpression',
                                  operator: 'or',
                                  left: {
                                    type: 'LogicalExpression',
                                    operator: 'or',
                                    left: {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'BinaryExpression',
                                        operator: '==',
                                        left: { type: 'Identifier', name: 'class' },
                                        right: { type: 'StringLiteral', value: null, raw: "'ranger'" },
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '==',
                                        left: { type: 'Identifier', name: 'class' },
                                        right: { type: 'StringLiteral', value: null, raw: "'warrior'" },
                                      },
                                    },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '==',
                                      left: { type: 'Identifier', name: 'class' },
                                      right: { type: 'StringLiteral', value: null, raw: "'mage'" },
                                    },
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '==',
                                    left: { type: 'Identifier', name: 'class' },
                                    right: { type: 'StringLiteral', value: null, raw: "'nuker'" },
                                  },
                                },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '==',
                                  left: { type: 'Identifier', name: 'class' },
                                  right: { type: 'StringLiteral', value: null, raw: "'rogue'" },
                                },
                              },
                              body: [
                                {
                                  type: 'IfStatement',
                                  clauses: [
                                    {
                                      type: 'IfClause',
                                      condition: {
                                        type: 'BinaryExpression',
                                        operator: '>=',
                                        left: { type: 'Identifier', name: 'number_of_units' },
                                        right: { type: 'NumericLiteral', value: 6, raw: '6' },
                                      },
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 2, raw: '2' }],
                                        },
                                      ],
                                    },
                                    {
                                      type: 'ElseifClause',
                                      condition: {
                                        type: 'BinaryExpression',
                                        operator: '>=',
                                        left: { type: 'Identifier', name: 'number_of_units' },
                                        right: { type: 'NumericLiteral', value: 3, raw: '3' },
                                      },
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                        },
                                      ],
                                    },
                                    {
                                      type: 'ElseClause',
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'LogicalExpression',
                                operator: 'or',
                                left: {
                                  type: 'LogicalExpression',
                                  operator: 'or',
                                  left: {
                                    type: 'LogicalExpression',
                                    operator: 'or',
                                    left: {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'or',
                                        left: {
                                          type: 'LogicalExpression',
                                          operator: 'or',
                                          left: {
                                            type: 'LogicalExpression',
                                            operator: 'or',
                                            left: {
                                              type: 'LogicalExpression',
                                              operator: 'or',
                                              left: {
                                                type: 'BinaryExpression',
                                                operator: '==',
                                                left: { type: 'Identifier', name: 'class' },
                                                right: { type: 'StringLiteral', value: null, raw: "'healer'" },
                                              },
                                              right: {
                                                type: 'BinaryExpression',
                                                operator: '==',
                                                left: { type: 'Identifier', name: 'class' },
                                                right: { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                                              },
                                            },
                                            right: {
                                              type: 'BinaryExpression',
                                              operator: '==',
                                              left: { type: 'Identifier', name: 'class' },
                                              right: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                                            },
                                          },
                                          right: {
                                            type: 'BinaryExpression',
                                            operator: '==',
                                            left: { type: 'Identifier', name: 'class' },
                                            right: { type: 'StringLiteral', value: null, raw: "'curser'" },
                                          },
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '==',
                                          left: { type: 'Identifier', name: 'class' },
                                          right: { type: 'StringLiteral', value: null, raw: "'forcer'" },
                                        },
                                      },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '==',
                                        left: { type: 'Identifier', name: 'class' },
                                        right: { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                                      },
                                    },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '==',
                                      left: { type: 'Identifier', name: 'class' },
                                      right: { type: 'StringLiteral', value: null, raw: "'voider'" },
                                    },
                                  },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '==',
                                    left: { type: 'Identifier', name: 'class' },
                                    right: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                                  },
                                },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '==',
                                  left: { type: 'Identifier', name: 'class' },
                                  right: { type: 'StringLiteral', value: null, raw: "'psyker'" },
                                },
                              },
                              body: [
                                {
                                  type: 'IfStatement',
                                  clauses: [
                                    {
                                      type: 'IfClause',
                                      condition: {
                                        type: 'BinaryExpression',
                                        operator: '>=',
                                        left: { type: 'Identifier', name: 'number_of_units' },
                                        right: { type: 'NumericLiteral', value: 4, raw: '4' },
                                      },
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 2, raw: '2' }],
                                        },
                                      ],
                                    },
                                    {
                                      type: 'ElseifClause',
                                      condition: {
                                        type: 'BinaryExpression',
                                        operator: '>=',
                                        left: { type: 'Identifier', name: 'number_of_units' },
                                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                      },
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                        },
                                      ],
                                    },
                                    {
                                      type: 'ElseClause',
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'class' },
                                right: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                              },
                              body: [
                                {
                                  type: 'IfStatement',
                                  clauses: [
                                    {
                                      type: 'IfClause',
                                      condition: {
                                        type: 'BinaryExpression',
                                        operator: '>=',
                                        left: { type: 'Identifier', name: 'number_of_units' },
                                        right: { type: 'NumericLiteral', value: 6, raw: '6' },
                                      },
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 3, raw: '3' }],
                                        },
                                      ],
                                    },
                                    {
                                      type: 'ElseifClause',
                                      condition: {
                                        type: 'BinaryExpression',
                                        operator: '>=',
                                        left: { type: 'Identifier', name: 'number_of_units' },
                                        right: { type: 'NumericLiteral', value: 4, raw: '4' },
                                      },
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 2, raw: '2' }],
                                        },
                                      ],
                                    },
                                    {
                                      type: 'ElseifClause',
                                      condition: {
                                        type: 'BinaryExpression',
                                        operator: '>=',
                                        left: { type: 'Identifier', name: 'number_of_units' },
                                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                      },
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                        },
                                      ],
                                    },
                                    {
                                      type: 'ElseClause',
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'class' },
                                right: { type: 'StringLiteral', value: null, raw: "'explorer'" },
                              },
                              body: [
                                {
                                  type: 'IfStatement',
                                  clauses: [
                                    {
                                      type: 'IfClause',
                                      condition: {
                                        type: 'BinaryExpression',
                                        operator: '>=',
                                        left: { type: 'Identifier', name: 'number_of_units' },
                                        right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                      },
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                        },
                                      ],
                                    },
                                    {
                                      type: 'ElseClause',
                                      body: [
                                        {
                                          type: 'ReturnStatement',
                                          arguments: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  type: 'ReturnStatement',
                  arguments: [
                    {
                      type: 'TableConstructorExpression',
                      fields: [
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'ranger' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ranger' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'ranger'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'warrior' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'warrior' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'warrior'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'mage' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'mage' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'mage'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'nuker' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'nuker' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'nuker'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'rogue' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'rogue' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'rogue'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'healer' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'healer' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'healer'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'conjurer' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'conjurer' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'enchanter' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'enchanter' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'psyker' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'psyker' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'psyker'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'curser' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'curser' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'curser'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'forcer' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'forcer' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'forcer'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'swarmer' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'swarmer' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'voider' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'voider' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'voider'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'sorcerer' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'sorcerer' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'mercenary' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'mercenary' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                            ],
                          },
                        },
                        {
                          type: 'TableKeyString',
                          key: { type: 'Identifier', name: 'explorer' },
                          value: {
                            type: 'CallExpression',
                            base: { type: 'Identifier', name: 'units_to_class_level' },
                            arguments: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'explorer' },
                                base: { type: 'Identifier', name: 'units_per_class' },
                              },
                              { type: 'StringLiteral', value: null, raw: "'explorer'" },
                            ],
                          },
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'get_classes' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [{ type: 'Identifier', name: 'units' }],
              body: [
                {
                  type: 'LocalStatement',
                  variables: [{ type: 'Identifier', name: 'classes' }],
                  init: [{ type: 'TableConstructorExpression', fields: [] }],
                },
                {
                  type: 'ForGenericStatement',
                  variables: [
                    { type: 'Identifier', name: '_' },
                    { type: 'Identifier', name: 'unit' },
                  ],
                  iterators: [
                    {
                      type: 'CallExpression',
                      base: { type: 'Identifier', name: 'ipairs' },
                      arguments: [{ type: 'Identifier', name: 'units' }],
                    },
                  ],
                  body: [
                    {
                      type: 'CallStatement',
                      expression: {
                        type: 'CallExpression',
                        base: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'insert' },
                          base: { type: 'Identifier', name: 'table' },
                        },
                        arguments: [
                          { type: 'Identifier', name: 'classes' },
                          {
                            type: 'CallExpression',
                            base: {
                              type: 'MemberExpression',
                              indexer: '.',
                              identifier: { type: 'Identifier', name: 'copy' },
                              base: { type: 'Identifier', name: 'table' },
                            },
                            arguments: [
                              {
                                type: 'IndexExpression',
                                base: { type: 'Identifier', name: 'character_classes' },
                                index: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'character' },
                                  base: { type: 'Identifier', name: 'unit' },
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  type: 'ReturnStatement',
                  arguments: [
                    {
                      type: 'CallExpression',
                      base: {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'unify' },
                        base: { type: 'Identifier', name: 'table' },
                      },
                      arguments: [
                        {
                          type: 'CallExpression',
                          base: {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'flatten' },
                            base: { type: 'Identifier', name: 'table' },
                          },
                          arguments: [{ type: 'Identifier', name: 'classes' }],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'class_set_numbers' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ranger'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 3, raw: '3' },
                          { type: 'NumericLiteral', value: 6, raw: '6' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'ranger' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warrior'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 3, raw: '3' },
                          { type: 'NumericLiteral', value: 6, raw: '6' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'warrior' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 3, raw: '3' },
                          { type: 'NumericLiteral', value: 6, raw: '6' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'mage' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'nuker'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 3, raw: '3' },
                          { type: 'NumericLiteral', value: 6, raw: '6' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'nuker' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'rogue'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 3, raw: '3' },
                          { type: 'NumericLiteral', value: 6, raw: '6' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'rogue' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'healer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'healer' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'conjurer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'conjurer' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enchanter'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'enchanter' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psyker'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'psyker' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'curser'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'curser' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'forcer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'forcer' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'swarmer' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'voider'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'voider' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'sorcerer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NumericLiteral', value: 6, raw: '6' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'sorcerer' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'mercenary'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 2, raw: '2' },
                          { type: 'NumericLiteral', value: 4, raw: '4' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'mercenary' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'explorer'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'units' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          { type: 'NumericLiteral', value: 1, raw: '1' },
                          { type: 'NumericLiteral', value: 1, raw: '1' },
                          { type: 'NilLiteral', value: null, raw: 'nil' },
                          {
                            type: 'MemberExpression',
                            indexer: '.',
                            identifier: { type: 'Identifier', name: 'explorer' },
                            base: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'get_number_of_units_per_class' },
                              arguments: [{ type: 'Identifier', name: 'units' }],
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'passive_names' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'centipede'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Centipede'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ouroboros_technique_r'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Ouroboros Technique R'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ouroboros_technique_l'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Ouroboros Technique L'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'amplify'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Amplify'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'resonance'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Resonance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ballista'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Ballista'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'call_of_the_void'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Call of the Void'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'crucio'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Crucio'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'speed_3'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Speed 3'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'damage_4'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Damage 4'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'shoot_5'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Shoot 5'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'death_6'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Death 6'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lasting_7'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Lasting 7'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'defensive_stance'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Defensive Stance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'offensive_stance'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Offensive Stance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'kinetic_bomb'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Kinetic Bomb'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'porcupine_technique'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Porcupine Technique'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'last_stand'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Last Stand'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'seeping'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Seeping'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'deceleration'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Deceleration'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'annihilation'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Annihilation'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'malediction'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Malediction'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hextouch'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Hextouch'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'whispers_of_doom'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Whispers of Doom'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'tremor'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Tremor'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'heavy_impact'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Heavy Impact'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fracture'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Fracture'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'meat_shield'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Meat Shield'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hive'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Hive'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'baneling_burst'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Baneling Burst'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blunt_arrow'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Blunt Arrow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'explosive_arrow'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Explosive Arrow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_machine_arrow'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Divine Machine Arrow'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancy'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Chronomancy'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'awakening'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Awakening'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_punishment'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Divine Punishment'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassination'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Assassination'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flying_daggers'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Flying Daggers'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ultimatum'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Ultimatum'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magnify'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Magnify'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'echo_barrage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Echo Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unleash'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Unleash'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'reinforce'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Reinforce'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'payback'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Payback'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enchanted'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Enchanted'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'freezing_field'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Freezing Field'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'burning_field'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Burning Field'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gravity_field'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Gravity Field'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magnetism'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Magnetism'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'insurance'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Insurance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dividends'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Dividends'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'berserking'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Berserking'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unwavering_stance'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Unwavering Stance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unrelenting_stance'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Unrelenting Stance'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blessing'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Blessing'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'haste'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Haste'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_barrage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Divine Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'orbitism'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Orbitism'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psyker_orbs'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Psyker Orbs'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychosense'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Psychosense'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychosink'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Psychosink'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'rearm'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Rearm'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'taunt'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Taunt'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'construct_instability'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Construct Instability'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'intimidation'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Intimidation'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulnerability'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Vulnerability'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'temporal_chains'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Temporal Chains'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ceremonial_dagger'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Ceremonial Dagger'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'homing_barrage'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Homing Barrage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'critical_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Critical Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'noxious_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Noxious Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infesting_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Infesting Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'kinetic_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Kinetic Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'burning_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Burning Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lucky_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Lucky Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'healing_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Healing Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stunning_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Stunning Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencing_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Silencing Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warping_shots'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Warping Shots'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'culling_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Culling Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lightning_strike'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Lightning Strike'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psycholeak'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Psycholeak'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_blessing'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Divine Blessing'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hardening'" },
                  value: { type: 'StringLiteral', value: null, raw: "'Hardening'" },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'passive_descriptions' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'centipede'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]+10/20/30%[fg] movement speed'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ouroboros_technique_r'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]rotating around yourself to the right releases [yellow]2/3/4[fg] projectiles per second'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ouroboros_technique_l'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]rotating around yourself to the left grants [yellow]+15/25/35%[fg] defense to all units'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'amplify'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]+20/35/50%[fg] AoE damage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'resonance'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]all AoE attacks deal [yellow]+3/5/7%[fg] damage per unit hit'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ballista'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+20/35/50%[fg] projectile damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'call_of_the_void'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]+30/60/90%[fg] DoT damage'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'crucio'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]taking damage also shares that across all enemies at [yellow]20/30/40%[fg] its value'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'speed_3'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]position [yellow]3[fg] has [yellow]+50%[fg] attack speed'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'damage_4'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]position [yellow]4[fg] has [yellow]+30%[fg] damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'shoot_5'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]position [yellow]5[fg] shoots [yellow]3[fg] projectiles per second'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'death_6'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]position [yellow]6[fg] takes [yellow]10%[fg] of its health as damage every [yellow]3[fg] seconds'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lasting_7'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]position [yellow]7[fg] will stay alive for [yellow]10[fg] seconds after dying'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'defensive_stance'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]first and last positions have [yellow]+10/20/30%[fg] defense'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'offensive_stance'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]first and last positions have [yellow]+10/20/30%[fg] damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'kinetic_bomb'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]when an ally dies it explodes, launching enemies away'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'porcupine_technique'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]when an ally dies it explodes, releasing piercing and ricocheting projectiles'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'last_stand'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]the last unit alive is fully healed and receives a [yellow]+20%[fg] bonus to all stats'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'seeping'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]enemies taking DoT damage have [yellow]-15/25/35%[fg] defense'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'deceleration'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]enemies taking DoT damage have [yellow]-15/25/35%[fg] movement speed'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'annihilation'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]when a voider dies deal its DoT damage to all enemies for [yellow]3[fg] seconds'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'malediction'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+1/3/5[fg] max curse targets to all allied cursers'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hextouch'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]enemies take [yellow]10/15/20[fg] damage per second for [yellow]3[fg] seconds when cursed'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'whispers_of_doom'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]curses apply doom, deal [yellow]100/150/200[fg] damage every [yellow]4/3/2[fg] doom instances'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'tremor'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]when enemies hit walls they create an area based on the knockback force'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'heavy_impact'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]when enemies hit walls they take damage based on the knockback force'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fracture'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]when enemies hit walls they explode into projectiles'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'meat_shield'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]critters [yellow]block[fg] enemy projectiles'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hive'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]critters have [yellow]+1/2/3[fg] HP'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'baneling_burst'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]critters die immediately on contact but also deal [yellow]50/100/150[fg] AoE damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blunt_arrow'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]ranger arrows have [yellow]+10/20/30%[fg] chance to knockback'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'explosive_arrow'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]ranger arrows have [yellow]+10/20/30%[fg] chance to deal [yellow]10/20/30%[fg] AoE damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_machine_arrow'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]ranger arrows have a [yellow]10/20/30%[fg] chance to seek and pierce [yellow]1/2/3[fg] times'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancy'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]mages cast their spells [yellow]15/25/35%[fg] faster'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'awakening'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+50/75/100%[fg] attack speed and damage to [yellow]1[fg] mage every round for that round'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_punishment'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]deal damage to all enemies based on how many mages you have'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassination'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]crits from rogues deal [yellow]8/10/12x[fg] damage but normal attacks deal [yellow]half[fg] damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flying_daggers'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]all projectiles thrown by rogues chain [yellow]+2/3/4[fg] times'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ultimatum'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]projectiles that chain gain [yellow]+10/20/30%[fg] damage with each chain'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magnify'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]+20/35/50%[fg] area size'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'echo_barrage'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]10/20/30%[fg] chance to create [yellow]1/2/3[fg] secondary AoEs on AoE hit'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unleash'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]all nukers gain [yellow]+1%[fg] area size and damage every second'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'reinforce'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+10/20/30%[fg] global damage, defense and aspd if you have one or more enchanters'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'payback'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+2/5/8%[fg] damage to all allies whenever an enchanter is hit'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enchanted'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+33/66/99%[fg] attack speed to a random unit if you have two or more enchanters'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'freezing_field'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]creates an area that slows enemies by [yellow]50%[fg] for [yellow]2[fg] seconds on sorcerer spell repeat'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'burning_field'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]creates an area that deals [yellow]30[fg] dps for [yellow]2[fg] seconds on sorcerer spell repeat'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gravity_field'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]creates an area that pulls enemies in for [yellow]1[fg] seconds on sorcerer spell repeat'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magnetism'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]gold coins and healing orbs are attracted to the snake from a longer range'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'insurance'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: '"[fg]heroes have [yellow]4[fg] times the chance of mercenary\'s bonus to drop [yellow]2[fg] gold on death"',
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dividends'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]mercenaries deal [yellow]+X%[fg] damage, where X is how much gold you have'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'berserking'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]all warriors have up to [yellow]+50/75/100%[fg] attack speed based on missing HP'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unwavering_stance'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]all warriors gain [yellow]+4/8/12%[fg] defense every [yellow]5[fg] seconds'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unrelenting_stance'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+2/5/8%[fg] defense to all allies whenever a warrior is hit'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blessing'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+10/20/30%[fg] healing effectiveness'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'haste'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+50%[fg] movement speed that decays over [yellow]4[fg] seconds on healing orb pick up'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_barrage'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]20/40/60%[fg] chance to release a ricocheting barrage on healing orb pick up'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'orbitism'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+25/50/75%[fg] psyker orb movement speed'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psyker_orbs'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]+1/2/4[fg] total psyker orbs'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychosense'" },
                  value: { type: 'StringLiteral', value: null, raw: "'[yellow]+33/66/99%[fg] orb range'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychosink'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]psyker orbs deal [yellow]+40/80/120%[fg] damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'rearm'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]constructs repeat their attacks once'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'taunt'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]10/20/30%[fg] chance for constructs to taunt nearby enemies on attack'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'construct_instability'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]constructs explode when disappearing, dealing [yellow]100/150/200%[fg] damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'intimidation'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]enemies spawn with [yellow]-10/20/30%[fg] max HP'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulnerability'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]enemies take [yellow]+10/20/30%[fg] damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'temporal_chains'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]enemies are [yellow]10/20/30%[fg] slower'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ceremonial_dagger'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]killing an enemy fires a homing dagger'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'homing_barrage'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]8/16/24%[fg] chance to release a homing barrage on enemy kill'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'critical_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]5/10/15%[fg] chance for attacks to critically strike, dealing [yellow]2x[fg] damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'noxious_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]8/16/24%[fg] chance for attacks to poison, dealing [yellow]20%[fg] dps for [yellow]3[fg] seconds'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infesting_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]10/20/30%[fg] chance for attacks to spawn [yellow]2[fg] critters on kill'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'kinetic_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]10/20/30%[fg] chance for attacks to push enemies away with high force'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'burning_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]15%[fg] chance for attacks to burn, dealing [yellow]20%[fg] dps for [yellow]3[fg] seconds'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lucky_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]8%[fg] chance for attacks to cause enemies to drop gold on death'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'healing_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]8%[fg] chance for attacks to spawn a healing orb on kill'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stunning_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]8/16/24%[fg] chance for attacks to stun for [yellow]2[fg] seconds'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencing_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]8/16/24%[fg] chance for attacks to silence for [yellow]2[fg] seconds on hit'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warping_shots'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'projectiles ignore wall collisions and warp around the screen [yellow]1/2/3[fg] times'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'culling_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]instantly kill elites below [yellow]10/20/30%[fg] max HP'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lightning_strike'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]5/10/15%[fg] chance for projectiles to create chain lightning, dealing [yellow]60/80/100%[fg] damage'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psycholeak'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]position [yellow]1[fg] generates [yellow]1[fg] psyker orb every [yellow]10[fg] seconds'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_blessing'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[fg]generate [yellow]1[fg] healing orb every [yellow]8[fg] seconds'",
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hardening'" },
                  value: {
                    type: 'StringLiteral',
                    value: null,
                    raw: "'[yellow]+150%[fg] defense to all allies for [yellow]3[fg] seconds after an ally dies'",
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'ts' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [
                { type: 'Identifier', name: 'lvl' },
                { type: 'Identifier', name: 'a' },
                { type: 'Identifier', name: 'b' },
                { type: 'Identifier', name: 'c' },
              ],
              body: [
                {
                  type: 'ReturnStatement',
                  arguments: [
                    {
                      type: 'BinaryExpression',
                      operator: '..',
                      left: { type: 'StringLiteral', value: null, raw: "'['" },
                      right: {
                        type: 'BinaryExpression',
                        operator: '..',
                        left: {
                          type: 'CallExpression',
                          base: { type: 'Identifier', name: 'ylb1' },
                          arguments: [{ type: 'Identifier', name: 'lvl' }],
                        },
                        right: {
                          type: 'BinaryExpression',
                          operator: '..',
                          left: { type: 'StringLiteral', value: null, raw: "']'" },
                          right: {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'tostring' },
                              arguments: [{ type: 'Identifier', name: 'a' }],
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: { type: 'StringLiteral', value: null, raw: "'[light_bg]/['" },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'ylb2' },
                                  arguments: [{ type: 'Identifier', name: 'lvl' }],
                                },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: { type: 'StringLiteral', value: null, raw: "']'" },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: {
                                      type: 'CallExpression',
                                      base: { type: 'Identifier', name: 'tostring' },
                                      arguments: [{ type: 'Identifier', name: 'b' }],
                                    },
                                    right: {
                                      type: 'BinaryExpression',
                                      operator: '..',
                                      left: { type: 'StringLiteral', value: null, raw: "'[light_bg]/['" },
                                      right: {
                                        type: 'BinaryExpression',
                                        operator: '..',
                                        left: {
                                          type: 'CallExpression',
                                          base: { type: 'Identifier', name: 'ylb3' },
                                          arguments: [{ type: 'Identifier', name: 'lvl' }],
                                        },
                                        right: {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: { type: 'StringLiteral', value: null, raw: "']'" },
                                          right: {
                                            type: 'BinaryExpression',
                                            operator: '..',
                                            left: {
                                              type: 'CallExpression',
                                              base: { type: 'Identifier', name: 'tostring' },
                                              arguments: [{ type: 'Identifier', name: 'c' }],
                                            },
                                            right: { type: 'StringLiteral', value: null, raw: "'[fg]'" },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'passive_descriptions_level' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'centipede'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+10%'" },
                                { type: 'StringLiteral', value: null, raw: "'20%'" },
                                { type: 'StringLiteral', value: null, raw: "'30%'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' movement speed'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ouroboros_technique_r'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]rotating around yourself to the right releases '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'2'" },
                                  { type: 'StringLiteral', value: null, raw: "'3'" },
                                  { type: 'StringLiteral', value: null, raw: "'4'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' projectiles per second'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ouroboros_technique_l'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]rotating around yourself to the left grants '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+15%'" },
                                  { type: 'StringLiteral', value: null, raw: "'25%'" },
                                  { type: 'StringLiteral', value: null, raw: "'35%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' defense to all units'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'amplify'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+20%'" },
                                { type: 'StringLiteral', value: null, raw: "'35%'" },
                                { type: 'StringLiteral', value: null, raw: "'50%'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' AoE damage'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'resonance'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]all AoE attacks deal '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+3%'" },
                                  { type: 'StringLiteral', value: null, raw: "'5%'" },
                                  { type: 'StringLiteral', value: null, raw: "'7%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage per unit hit'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ballista'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+20%'" },
                                { type: 'StringLiteral', value: null, raw: "'35%'" },
                                { type: 'StringLiteral', value: null, raw: "'50%'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' projectile damage'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'call_of_the_void'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+30%'" },
                                { type: 'StringLiteral', value: null, raw: "'60%'" },
                                { type: 'StringLiteral', value: null, raw: "'90%'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' DoT damage'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'crucio'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]taking damage also shares that across all enemies at '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'20%'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                  { type: 'StringLiteral', value: null, raw: "'40%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' its value'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'speed_3'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]position [yellow]3[fg] has [yellow]+50%[fg] attack speed'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'damage_4'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]position [yellow]4[fg] has [yellow]+30%[fg] damage'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'shoot_5'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]position [yellow]5[fg] shoots [yellow]3[fg] projectiles per second'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'death_6'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]position [yellow]6[fg] takes [yellow]10%[fg] of its health as damage every [yellow]3[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lasting_7'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]position [yellow]7[fg] will stay alive for [yellow]10[fg] seconds after dying'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'defensive_stance'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]first and last positions have '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+10%'" },
                                  { type: 'StringLiteral', value: null, raw: "'20%'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' defense'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'offensive_stance'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]first and last positions have '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+10%'" },
                                  { type: 'StringLiteral', value: null, raw: "'20%'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'kinetic_bomb'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]when an ally dies it explodes, launching enemies away'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'porcupine_technique'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]when an ally dies it explodes, releasing piercing projectiles'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'last_stand'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]the last unit alive is fully healed and receives a [yellow]+20%[fg] bonus to all stats'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'seeping'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]enemies taking DoT damage have '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'-15%'" },
                                  { type: 'StringLiteral', value: null, raw: "'25%'" },
                                  { type: 'StringLiteral', value: null, raw: "'35%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' defense'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'deceleration'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]enemies taking DoT damage have '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'-15%'" },
                                  { type: 'StringLiteral', value: null, raw: "'25%'" },
                                  { type: 'StringLiteral', value: null, raw: "'35%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' movement speed'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'annihilation'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]when a voider dies deal its DoT damage to all enemies for [yellow]3[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'malediction'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+1'" },
                                { type: 'StringLiteral', value: null, raw: "'3'" },
                                { type: 'StringLiteral', value: null, raw: "'5'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' max curse targets to all allied cursers'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hextouch'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]enemies take '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'10'" },
                                  { type: 'StringLiteral', value: null, raw: "'15'" },
                                  { type: 'StringLiteral', value: null, raw: "'20'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "'damage per second for [yellow]3[fg] seconds when cursed'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'whispers_of_doom'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]curses apply doom, deal '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'100'" },
                                  { type: 'StringLiteral', value: null, raw: "'150'" },
                                  { type: 'StringLiteral', value: null, raw: "'200'" },
                                ],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "' every '" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ts' },
                                    arguments: [
                                      { type: 'Identifier', name: 'lvl' },
                                      { type: 'StringLiteral', value: null, raw: "'4'" },
                                      { type: 'StringLiteral', value: null, raw: "'3'" },
                                      { type: 'StringLiteral', value: null, raw: "'2'" },
                                    ],
                                  },
                                  right: { type: 'StringLiteral', value: null, raw: "' doom instances'" },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'tremor'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]when enemies hit walls they create an area based to the knockback force'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'heavy_impact'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]when enemies hit walls they take damage based on the knockback force'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'fracture'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]when enemies hit walls they explode into projectiles'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'meat_shield'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]critters [yellow]block[fg] enemy projectiles'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hive'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]critters have '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+1'" },
                                  { type: 'StringLiteral', value: null, raw: "'2'" },
                                  { type: 'StringLiteral', value: null, raw: "'3'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' HP'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'baneling_burst'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]critters die immediately on contact but also deal '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'50'" },
                                  { type: 'StringLiteral', value: null, raw: "'100'" },
                                  { type: 'StringLiteral', value: null, raw: "'150'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' AoE damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blunt_arrow'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]ranger arrows have '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+10%'" },
                                  { type: 'StringLiteral', value: null, raw: "'20%'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' chance to knockback'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'explosive_arrow'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]ranger arrows have '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+10%'" },
                                  { type: 'StringLiteral', value: null, raw: "'20%'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "' chance to deal '" },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ts' },
                                    arguments: [
                                      { type: 'Identifier', name: 'lvl' },
                                      { type: 'StringLiteral', value: null, raw: "'10%'" },
                                      { type: 'StringLiteral', value: null, raw: "'20%'" },
                                      { type: 'StringLiteral', value: null, raw: "'30%'" },
                                    ],
                                  },
                                  right: { type: 'StringLiteral', value: null, raw: "' AoE damage'" },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_machine_arrow'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]ranger arrows have a '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'10%'" },
                                  { type: 'StringLiteral', value: null, raw: "'20%'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: {
                                  type: 'StringLiteral',
                                  value: null,
                                  raw: "' chance to seek and pierce '",
                                },
                                right: {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: {
                                    type: 'CallExpression',
                                    base: { type: 'Identifier', name: 'ts' },
                                    arguments: [
                                      { type: 'Identifier', name: 'lvl' },
                                      { type: 'StringLiteral', value: null, raw: "'1'" },
                                      { type: 'StringLiteral', value: null, raw: "'2'" },
                                      { type: 'StringLiteral', value: null, raw: "'3'" },
                                    ],
                                  },
                                  right: { type: 'StringLiteral', value: null, raw: "' times'" },
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'chronomancy'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]mages cast their spells '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'15%'" },
                                  { type: 'StringLiteral', value: null, raw: "'25%'" },
                                  { type: 'StringLiteral', value: null, raw: "'35%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' faster'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'awakening'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+50%'" },
                                { type: 'StringLiteral', value: null, raw: "'75%'" },
                                { type: 'StringLiteral', value: null, raw: "'100%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' attack speed and damage to [yellow]1[fg] mage every round for that round'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_punishment'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]deal damage to all enemies based on how many mages you have'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'assassination'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]crits from rogues deal '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'8x'" },
                                  { type: 'StringLiteral', value: null, raw: "'10x'" },
                                  { type: 'StringLiteral', value: null, raw: "'12x'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "' damage but normal attacks deal [yellow]half[fg] damage'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'flying_daggers'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]all projectiles thrown by rogues chain '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+2'" },
                                  { type: 'StringLiteral', value: null, raw: "'3'" },
                                  { type: 'StringLiteral', value: null, raw: "'4'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' times'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ultimatum'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]projectiles that chain gain '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+10%'" },
                                  { type: 'StringLiteral', value: null, raw: "'20%'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage with each chain'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magnify'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+20%'" },
                                { type: 'StringLiteral', value: null, raw: "'35%'" },
                                { type: 'StringLiteral', value: null, raw: "'50%'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' area size'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'echo_barrage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'10%'" },
                                { type: 'StringLiteral', value: null, raw: "'20%'" },
                                { type: 'StringLiteral', value: null, raw: "'30%'" },
                              ],
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: { type: 'StringLiteral', value: null, raw: "' chance to create '" },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'ts' },
                                  arguments: [
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'1'" },
                                    { type: 'StringLiteral', value: null, raw: "'2'" },
                                    { type: 'StringLiteral', value: null, raw: "'3'" },
                                  ],
                                },
                                right: {
                                  type: 'StringLiteral',
                                  value: null,
                                  raw: "' secondary AoEs on AoE hit'",
                                },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unleash'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]all nukers gain [yellow]+1%[fg] area size and damage every second'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'reinforce'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+10%'" },
                                { type: 'StringLiteral', value: null, raw: "'20%'" },
                                { type: 'StringLiteral', value: null, raw: "'30%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' global damage, defense and aspd if you have one or more enchanters'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'payback'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+2%'" },
                                { type: 'StringLiteral', value: null, raw: "'5%'" },
                                { type: 'StringLiteral', value: null, raw: "'8%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' damage to all allies whenever an enchanter is hit'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'enchanted'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+33%'" },
                                { type: 'StringLiteral', value: null, raw: "'66%'" },
                                { type: 'StringLiteral', value: null, raw: "'99%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' attack speed to a random unit if you have two or more enchanters'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'freezing_field'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates an area that slows enemies by [yellow]50%[fg] for [yellow]2[fg] seconds on sorcerer spell repeat'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'burning_field'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates an area that deals [yellow]30[fg] dps for [yellow]2[fg] seconds on sorcerer spell repeat'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'gravity_field'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]creates an area that pulls enemies in for [yellow]1[fg] seconds on sorcerer spell repeat'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'magnetism'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]gold coins and healing orbs are attracted to the snake from a longer range'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'insurance'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: '"[fg]heroes have [yellow]4[fg] times the chance of mercenary\'s bonus to drop [yellow]2[fg] gold on death"',
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'dividends'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]mercenaries deal [yellow]+X%[fg] damage, where X is how much gold you have'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'berserking'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]all warriors have up to '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+50%'" },
                                  { type: 'StringLiteral', value: null, raw: "'75%'" },
                                  { type: 'StringLiteral', value: null, raw: "'100%'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "' attack speed based on missing HP'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unwavering_stance'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]all warriors gain '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+4%'" },
                                  { type: 'StringLiteral', value: null, raw: "'8%'" },
                                  { type: 'StringLiteral', value: null, raw: "'12%'" },
                                ],
                              },
                              right: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "' defense every [yellow]5[fg] seconds'",
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'unrelenting_stance'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+2%'" },
                                { type: 'StringLiteral', value: null, raw: "'5%'" },
                                { type: 'StringLiteral', value: null, raw: "'8%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' defense to all allies whenever a warrior is hit'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'blessing'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+10%'" },
                                { type: 'StringLiteral', value: null, raw: "'20%'" },
                                { type: 'StringLiteral', value: null, raw: "'30%'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' healing effectiveness'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'haste'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+50%[fg] movement speed that decays over [yellow]4[fg] seconds on healing orb pick up'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_barrage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'20%'" },
                                { type: 'StringLiteral', value: null, raw: "'40%'" },
                                { type: 'StringLiteral', value: null, raw: "'60%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance to release a ricocheting barrage on healing orb pick up'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'orbitism'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+25%'" },
                                { type: 'StringLiteral', value: null, raw: "'50%'" },
                                { type: 'StringLiteral', value: null, raw: "'75%'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' psyker orb movement speed'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psyker_orbs'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+1'" },
                                { type: 'StringLiteral', value: null, raw: "'2'" },
                                { type: 'StringLiteral', value: null, raw: "'4'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' psyker orbs'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychosense'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'+33%'" },
                                { type: 'StringLiteral', value: null, raw: "'66%'" },
                                { type: 'StringLiteral', value: null, raw: "'99%'" },
                              ],
                            },
                            right: { type: 'StringLiteral', value: null, raw: "' orb range'" },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psychosink'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]psyker orbs deal '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+40%'" },
                                  { type: 'StringLiteral', value: null, raw: "'80%'" },
                                  { type: 'StringLiteral', value: null, raw: "'120%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'rearm'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]constructs repeat their attacks once'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'taunt'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'10%'" },
                                { type: 'StringLiteral', value: null, raw: "'20%'" },
                                { type: 'StringLiteral', value: null, raw: "'30%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance for constructs to taunt nearby enemies on attack'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'construct_instability'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]constructs explode when disappearing, dealing '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'100'" },
                                  { type: 'StringLiteral', value: null, raw: "'150'" },
                                  { type: 'StringLiteral', value: null, raw: "'200%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'intimidation'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]enemies spawn with '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'-10'" },
                                  { type: 'StringLiteral', value: null, raw: "'20'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' max HP'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'vulnerability'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]enemies take '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'+10'" },
                                  { type: 'StringLiteral', value: null, raw: "'20'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' damage'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'temporal_chains'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: { type: 'StringLiteral', value: null, raw: "'[fg]enemies are '" },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'10'" },
                                  { type: 'StringLiteral', value: null, raw: "'20'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' slower'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'ceremonial_dagger'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]killing an enemy fires a homing dagger'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'homing_barrage'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'8'" },
                                { type: 'StringLiteral', value: null, raw: "'16'" },
                                { type: 'StringLiteral', value: null, raw: "'24%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance to release a homing barrage on enemy kill'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'critical_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'5'" },
                                { type: 'StringLiteral', value: null, raw: "'10'" },
                                { type: 'StringLiteral', value: null, raw: "'15%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance for attacks to critically strike, dealing [yellow]2x[fg] damage'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'noxious_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'8'" },
                                { type: 'StringLiteral', value: null, raw: "'16'" },
                                { type: 'StringLiteral', value: null, raw: "'24%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance for attacks to poison, dealing [yellow]20%[fg] dps for [yellow]3[fg] seconds'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'infesting_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'10'" },
                                { type: 'StringLiteral', value: null, raw: "'20'" },
                                { type: 'StringLiteral', value: null, raw: "'30%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance for attacks to spawn [yellow]2[fg] critters on kill'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'kinetic_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'10'" },
                                { type: 'StringLiteral', value: null, raw: "'20'" },
                                { type: 'StringLiteral', value: null, raw: "'30%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance for attacks to push enemies away with high force'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'burning_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]15%[fg] chance for attacks to burn, dealing [yellow]20%[fg] dps for [yellow]3[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lucky_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]8%[fg] chance for attacks to cause enemies to drop gold on death'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'healing_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]8%[fg] chance for attacks to spawn a healing orb on kill'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'stunning_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'8'" },
                                { type: 'StringLiteral', value: null, raw: "'16'" },
                                { type: 'StringLiteral', value: null, raw: "'24%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance for attacks to stun for [yellow]2[fg] seconds'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'silencing_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'8'" },
                                { type: 'StringLiteral', value: null, raw: "'16'" },
                                { type: 'StringLiteral', value: null, raw: "'24%'" },
                              ],
                            },
                            right: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "' chance for attacks to silence for [yellow]2[fg] seconds on hit'",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'warping_shots'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'projectiles ignore wall collisions and warp around the screen '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'1'" },
                                  { type: 'StringLiteral', value: null, raw: "'2'" },
                                  { type: 'StringLiteral', value: null, raw: "'3'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' times'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'culling_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'StringLiteral',
                              value: null,
                              raw: "'[fg]instantly kill elites below '",
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'ts' },
                                arguments: [
                                  { type: 'Identifier', name: 'lvl' },
                                  { type: 'StringLiteral', value: null, raw: "'10'" },
                                  { type: 'StringLiteral', value: null, raw: "'20'" },
                                  { type: 'StringLiteral', value: null, raw: "'30%'" },
                                ],
                              },
                              right: { type: 'StringLiteral', value: null, raw: "' max HP'" },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'lightning_strike'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'BinaryExpression',
                            operator: '..',
                            left: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'ts' },
                              arguments: [
                                { type: 'Identifier', name: 'lvl' },
                                { type: 'StringLiteral', value: null, raw: "'5'" },
                                { type: 'StringLiteral', value: null, raw: "'10'" },
                                { type: 'StringLiteral', value: null, raw: "'15%'" },
                              ],
                            },
                            right: {
                              type: 'BinaryExpression',
                              operator: '..',
                              left: {
                                type: 'StringLiteral',
                                value: null,
                                raw: "' chance for projectiles to create chain lightning, dealing '",
                              },
                              right: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'ts' },
                                  arguments: [
                                    { type: 'Identifier', name: 'lvl' },
                                    { type: 'StringLiteral', value: null, raw: "'60'" },
                                    { type: 'StringLiteral', value: null, raw: "'80'" },
                                    { type: 'StringLiteral', value: null, raw: "'100%'" },
                                  ],
                                },
                                right: { type: 'StringLiteral', value: null, raw: "' damage'" },
                              },
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'psycholeak'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]position [yellow]1[fg] generates [yellow]1[fg] psyker orb every [yellow]10[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'divine_blessing'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[fg]generate [yellow]1[fg] healing orb every [yellow]8[fg] seconds'",
                          },
                        ],
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'StringLiteral', value: null, raw: "'hardening'" },
                  value: {
                    type: 'FunctionDeclaration',
                    identifier: null,
                    isLocal: false,
                    parameters: [{ type: 'Identifier', name: 'lvl' }],
                    body: [
                      {
                        type: 'ReturnStatement',
                        arguments: [
                          {
                            type: 'StringLiteral',
                            value: null,
                            raw: "'[yellow]+150%[fg] defense to all allies for [yellow]3[fg] seconds after an ally dies'",
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'level_to_tier_weights' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 1, raw: '1' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 90, raw: '90' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 2, raw: '2' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 80, raw: '80' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 3, raw: '3' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 75, raw: '75' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 4, raw: '4' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 70, raw: '70' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 5, raw: '5' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 70, raw: '70' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 6, raw: '6' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 65, raw: '65' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 7, raw: '7' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 60, raw: '60' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 8, raw: '8' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 55, raw: '55' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 9, raw: '9' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 50, raw: '50' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 10, raw: '10' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 50, raw: '50' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 11, raw: '11' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 45, raw: '45' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 12, raw: '12' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 40, raw: '40' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 13, raw: '13' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 35, raw: '35' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 14, raw: '14' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 15, raw: '15' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 16, raw: '16' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 17, raw: '17' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 35, raw: '35' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 18, raw: '18' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 35, raw: '35' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 19, raw: '19' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 40, raw: '40' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 20, raw: '20' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 40, raw: '40' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 21, raw: '21' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 40, raw: '40' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 35, raw: '35' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 22, raw: '22' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 40, raw: '40' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 40, raw: '40' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 23, raw: '23' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 35, raw: '35' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 45, raw: '45' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 24, raw: '24' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 60, raw: '60' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 25, raw: '25' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 100, raw: '100' } },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'level_to_gold_gained' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 1, raw: '1' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 2, raw: '2' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 3, raw: '3' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 6, raw: '6' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 4, raw: '4' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 5, raw: '5' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 6, raw: '6' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 7, raw: '7' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 8, raw: '8' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 14, raw: '14' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 9, raw: '9' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 14, raw: '14' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 18, raw: '18' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 10, raw: '10' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 13, raw: '13' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 11, raw: '11' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 12, raw: '12' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 18, raw: '18' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 13, raw: '13' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 14, raw: '14' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 14, raw: '14' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 16, raw: '16' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 15, raw: '15' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 14, raw: '14' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 18, raw: '18' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 16, raw: '16' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 17, raw: '17' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 18, raw: '18' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 24, raw: '24' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 19, raw: '19' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 20, raw: '20' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 14, raw: '14' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 21, raw: '21' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 28, raw: '28' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 22, raw: '22' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 32, raw: '32' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 32, raw: '32' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 23, raw: '23' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 36, raw: '36' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 36, raw: '36' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 24, raw: '24' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 48, raw: '48' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 48, raw: '48' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 25, raw: '25' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 100, raw: '100' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 100, raw: '100' } },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'k' }],
          init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
        },
        {
          type: 'ForNumericStatement',
          variable: { type: 'Identifier', name: 'i' },
          start: { type: 'NumericLiteral', value: 26, raw: '26' },
          end: { type: 'NumericLiteral', value: 5000, raw: '5000' },
          step: null,
          body: [
            {
              type: 'LocalStatement',
              variables: [{ type: 'Identifier', name: 'n' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '%',
                  left: { type: 'Identifier', name: 'i' },
                  right: { type: 'NumericLiteral', value: 25, raw: '25' },
                },
              ],
            },
            {
              type: 'IfStatement',
              clauses: [
                {
                  type: 'IfClause',
                  condition: {
                    type: 'BinaryExpression',
                    operator: '==',
                    left: { type: 'Identifier', name: 'n' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  body: [
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'n' }],
                      init: [{ type: 'NumericLiteral', value: 25, raw: '25' }],
                    },
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'k' }],
                      init: [
                        {
                          type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Identifier', name: 'k' },
                          right: { type: 'NumericLiteral', value: 1, raw: '1' },
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [
                {
                  type: 'IndexExpression',
                  base: { type: 'Identifier', name: 'level_to_gold_gained' },
                  index: { type: 'Identifier', name: 'i' },
                },
              ],
              init: [
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    {
                      type: 'TableValue',
                      value: {
                        type: 'BinaryExpression',
                        operator: '*',
                        left: {
                          type: 'IndexExpression',
                          base: {
                            type: 'IndexExpression',
                            base: { type: 'Identifier', name: 'level_to_gold_gained' },
                            index: { type: 'Identifier', name: 'n' },
                          },
                          index: { type: 'NumericLiteral', value: 1, raw: '1' },
                        },
                        right: { type: 'Identifier', name: 'k' },
                      },
                    },
                    {
                      type: 'TableValue',
                      value: {
                        type: 'BinaryExpression',
                        operator: '*',
                        left: {
                          type: 'IndexExpression',
                          base: {
                            type: 'IndexExpression',
                            base: { type: 'Identifier', name: 'level_to_gold_gained' },
                            index: { type: 'Identifier', name: 'n' },
                          },
                          index: { type: 'NumericLiteral', value: 2, raw: '2' },
                        },
                        right: { type: 'Identifier', name: 'k' },
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'level_to_elite_spawn_weights' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 1, raw: '1' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 2, raw: '2' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 2, raw: '2' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 3, raw: '3' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 4, raw: '4' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 5, raw: '5' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 2, raw: '2' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 6, raw: '6' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 7, raw: '7' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 2, raw: '2' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 8, raw: '8' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 6, raw: '6' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 9, raw: '9' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 14, raw: '14' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 10, raw: '10' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 11, raw: '11' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 6, raw: '6' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 2, raw: '2' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 12, raw: '12' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 16, raw: '16' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 13, raw: '13' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 14, raw: '14' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 12, raw: '12' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 6, raw: '6' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 15, raw: '15' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 18, raw: '18' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 16, raw: '16' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 6, raw: '6' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 17, raw: '17' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 6, raw: '6' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 3, raw: '3' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 18, raw: '18' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 18, raw: '18' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 19, raw: '19' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 6, raw: '6' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 20, raw: '20' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 6, raw: '6' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 2, raw: '2' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 21, raw: '21' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 22, raw: '22' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 22, raw: '22' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 8, raw: '8' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 4, raw: '4' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 23, raw: '23' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 24, raw: '24' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 25, raw: '25' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'k' }],
          init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'l' }],
          init: [{ type: 'NumericLiteral', value: 0.2, raw: '0.2' }],
        },
        {
          type: 'ForNumericStatement',
          variable: { type: 'Identifier', name: 'i' },
          start: { type: 'NumericLiteral', value: 26, raw: '26' },
          end: { type: 'NumericLiteral', value: 5000, raw: '5000' },
          step: null,
          body: [
            {
              type: 'LocalStatement',
              variables: [{ type: 'Identifier', name: 'n' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '%',
                  left: { type: 'Identifier', name: 'i' },
                  right: { type: 'NumericLiteral', value: 25, raw: '25' },
                },
              ],
            },
            {
              type: 'IfStatement',
              clauses: [
                {
                  type: 'IfClause',
                  condition: {
                    type: 'BinaryExpression',
                    operator: '==',
                    left: { type: 'Identifier', name: 'n' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  body: [
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'n' }],
                      init: [{ type: 'NumericLiteral', value: 25, raw: '25' }],
                    },
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'k' }],
                      init: [
                        {
                          type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Identifier', name: 'k' },
                          right: { type: 'NumericLiteral', value: 1, raw: '1' },
                        },
                      ],
                    },
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'l' }],
                      init: [
                        {
                          type: 'BinaryExpression',
                          operator: '*',
                          left: { type: 'Identifier', name: 'l' },
                          right: { type: 'NumericLiteral', value: 2, raw: '2' },
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              type: 'LocalStatement',
              variables: [
                { type: 'Identifier', name: 'a' },
                { type: 'Identifier', name: 'b' },
                { type: 'Identifier', name: 'c' },
                { type: 'Identifier', name: 'd' },
                { type: 'Identifier', name: 'e' },
                { type: 'Identifier', name: 'f' },
              ],
              init: [
                {
                  type: 'CallExpression',
                  base: { type: 'Identifier', name: 'unpack' },
                  arguments: [
                    {
                      type: 'IndexExpression',
                      base: { type: 'Identifier', name: 'level_to_elite_spawn_weights' },
                      index: { type: 'Identifier', name: 'n' },
                    },
                  ],
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [{ type: 'Identifier', name: 'a' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '+',
                  left: {
                    type: 'LogicalExpression',
                    operator: 'or',
                    left: { type: 'Identifier', name: 'a' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  right: {
                    type: 'BinaryExpression',
                    operator: '*',
                    left: {
                      type: 'LogicalExpression',
                      operator: 'or',
                      left: { type: 'Identifier', name: 'a' },
                      right: { type: 'NumericLiteral', value: 0, raw: '0' },
                    },
                    right: { type: 'Identifier', name: 'l' },
                  },
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [{ type: 'Identifier', name: 'b' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '+',
                  left: {
                    type: 'LogicalExpression',
                    operator: 'or',
                    left: { type: 'Identifier', name: 'b' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  right: {
                    type: 'BinaryExpression',
                    operator: '*',
                    left: {
                      type: 'LogicalExpression',
                      operator: 'or',
                      left: { type: 'Identifier', name: 'b' },
                      right: { type: 'NumericLiteral', value: 0, raw: '0' },
                    },
                    right: { type: 'Identifier', name: 'l' },
                  },
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [{ type: 'Identifier', name: 'c' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '+',
                  left: {
                    type: 'LogicalExpression',
                    operator: 'or',
                    left: { type: 'Identifier', name: 'c' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  right: {
                    type: 'BinaryExpression',
                    operator: '*',
                    left: {
                      type: 'LogicalExpression',
                      operator: 'or',
                      left: { type: 'Identifier', name: 'c' },
                      right: { type: 'NumericLiteral', value: 0, raw: '0' },
                    },
                    right: { type: 'Identifier', name: 'l' },
                  },
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [{ type: 'Identifier', name: 'd' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '+',
                  left: {
                    type: 'LogicalExpression',
                    operator: 'or',
                    left: { type: 'Identifier', name: 'd' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  right: {
                    type: 'BinaryExpression',
                    operator: '*',
                    left: {
                      type: 'LogicalExpression',
                      operator: 'or',
                      left: { type: 'Identifier', name: 'd' },
                      right: { type: 'NumericLiteral', value: 0, raw: '0' },
                    },
                    right: { type: 'Identifier', name: 'l' },
                  },
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [{ type: 'Identifier', name: 'e' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '+',
                  left: {
                    type: 'LogicalExpression',
                    operator: 'or',
                    left: { type: 'Identifier', name: 'e' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  right: {
                    type: 'BinaryExpression',
                    operator: '*',
                    left: {
                      type: 'LogicalExpression',
                      operator: 'or',
                      left: { type: 'Identifier', name: 'e' },
                      right: { type: 'NumericLiteral', value: 0, raw: '0' },
                    },
                    right: { type: 'Identifier', name: 'l' },
                  },
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [{ type: 'Identifier', name: 'f' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '+',
                  left: {
                    type: 'LogicalExpression',
                    operator: 'or',
                    left: { type: 'Identifier', name: 'f' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  right: {
                    type: 'BinaryExpression',
                    operator: '*',
                    left: {
                      type: 'LogicalExpression',
                      operator: 'or',
                      left: { type: 'Identifier', name: 'f' },
                      right: { type: 'NumericLiteral', value: 0, raw: '0' },
                    },
                    right: { type: 'Identifier', name: 'l' },
                  },
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [
                {
                  type: 'IndexExpression',
                  base: { type: 'Identifier', name: 'level_to_elite_spawn_weights' },
                  index: { type: 'Identifier', name: 'i' },
                },
              ],
              init: [
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    { type: 'TableValue', value: { type: 'Identifier', name: 'a' } },
                    { type: 'TableValue', value: { type: 'Identifier', name: 'b' } },
                    { type: 'TableValue', value: { type: 'Identifier', name: 'c' } },
                    { type: 'TableValue', value: { type: 'Identifier', name: 'd' } },
                    { type: 'TableValue', value: { type: 'Identifier', name: 'e' } },
                    { type: 'TableValue', value: { type: 'Identifier', name: 'f' } },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'level_to_boss' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 6, raw: '6' },
                  value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 12, raw: '12' },
                  value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 18, raw: '18' },
                  value: { type: 'StringLiteral', value: null, raw: "'swarmer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 24, raw: '24' },
                  value: { type: 'StringLiteral', value: null, raw: "'forcer'" },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 25, raw: '25' },
                  value: { type: 'StringLiteral', value: null, raw: "'randomizer'" },
                },
              ],
            },
          ],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'bosses' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'exploder'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'swarmer'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'forcer'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'randomizer'" } },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [
            {
              type: 'IndexExpression',
              base: { type: 'Identifier', name: 'level_to_boss' },
              index: { type: 'NumericLiteral', value: 31, raw: '31' },
            },
          ],
          init: [{ type: 'StringLiteral', value: null, raw: "'speed_booster'" }],
        },
        {
          type: 'AssignmentStatement',
          variables: [
            {
              type: 'IndexExpression',
              base: { type: 'Identifier', name: 'level_to_boss' },
              index: { type: 'NumericLiteral', value: 37, raw: '37' },
            },
          ],
          init: [{ type: 'StringLiteral', value: null, raw: "'exploder'" }],
        },
        {
          type: 'AssignmentStatement',
          variables: [
            {
              type: 'IndexExpression',
              base: { type: 'Identifier', name: 'level_to_boss' },
              index: { type: 'NumericLiteral', value: 43, raw: '43' },
            },
          ],
          init: [{ type: 'StringLiteral', value: null, raw: "'swarmer'" }],
        },
        {
          type: 'AssignmentStatement',
          variables: [
            {
              type: 'IndexExpression',
              base: { type: 'Identifier', name: 'level_to_boss' },
              index: { type: 'NumericLiteral', value: 49, raw: '49' },
            },
          ],
          init: [{ type: 'StringLiteral', value: null, raw: "'forcer'" }],
        },
        {
          type: 'AssignmentStatement',
          variables: [
            {
              type: 'IndexExpression',
              base: { type: 'Identifier', name: 'level_to_boss' },
              index: { type: 'NumericLiteral', value: 50, raw: '50' },
            },
          ],
          init: [{ type: 'StringLiteral', value: null, raw: "'randomizer'" }],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'i' }],
          init: [{ type: 'NumericLiteral', value: 31, raw: '31' }],
        },
        {
          type: 'LocalStatement',
          variables: [{ type: 'Identifier', name: 'k' }],
          init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
        },
        {
          type: 'WhileStatement',
          condition: {
            type: 'BinaryExpression',
            operator: '<',
            left: { type: 'Identifier', name: 'i' },
            right: { type: 'NumericLiteral', value: 5000, raw: '5000' },
          },
          body: [
            {
              type: 'AssignmentStatement',
              variables: [
                {
                  type: 'IndexExpression',
                  base: { type: 'Identifier', name: 'level_to_boss' },
                  index: { type: 'Identifier', name: 'i' },
                },
              ],
              init: [
                {
                  type: 'IndexExpression',
                  base: { type: 'Identifier', name: 'bosses' },
                  index: { type: 'Identifier', name: 'k' },
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [{ type: 'Identifier', name: 'k' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '+',
                  left: { type: 'Identifier', name: 'k' },
                  right: { type: 'NumericLiteral', value: 1, raw: '1' },
                },
              ],
            },
            {
              type: 'IfStatement',
              clauses: [
                {
                  type: 'IfClause',
                  condition: {
                    type: 'BinaryExpression',
                    operator: '==',
                    left: { type: 'Identifier', name: 'k' },
                    right: { type: 'NumericLiteral', value: 5, raw: '5' },
                  },
                  body: [
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'i' }],
                      init: [
                        {
                          type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Identifier', name: 'i' },
                          right: { type: 'NumericLiteral', value: 1, raw: '1' },
                        },
                      ],
                    },
                  ],
                },
                {
                  type: 'ElseClause',
                  body: [
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'i' }],
                      init: [
                        {
                          type: 'BinaryExpression',
                          operator: '+',
                          left: { type: 'Identifier', name: 'i' },
                          right: { type: 'NumericLiteral', value: 6, raw: '6' },
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              type: 'IfStatement',
              clauses: [
                {
                  type: 'IfClause',
                  condition: {
                    type: 'BinaryExpression',
                    operator: '==',
                    left: { type: 'Identifier', name: 'k' },
                    right: { type: 'NumericLiteral', value: 6, raw: '6' },
                  },
                  body: [
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'k' }],
                      init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'level_to_elite_spawn_types' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 1, raw: '1' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 2, raw: '2' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 3, raw: '3' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 4, raw: '4' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'exploder'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 5, raw: '5' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 6, raw: '6' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 7, raw: '7' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 8, raw: '8' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 9, raw: '9' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 10, raw: '10' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 11, raw: '11' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'tank'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 12, raw: '12' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'exploder'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 13, raw: '13' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 14, raw: '14' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'spawner'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 15, raw: '15' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 16, raw: '16' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'spawner'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 17, raw: '17' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'spawner'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 18, raw: '18' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'spawner'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 19, raw: '19' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'tank'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 20, raw: '20' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'tank'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'spawner'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 21, raw: '21' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 22, raw: '22' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'tank'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 23, raw: '23' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'tank'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 24, raw: '24' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [{ type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'tank'" } }],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 25, raw: '25' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'speed_booster'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'exploder'" },
                      },
                      {
                        type: 'TableValue',
                        value: { type: 'StringLiteral', value: null, raw: "'headbutter'" },
                      },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'tank'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shooter'" } },
                      { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'spawner'" } },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'ForNumericStatement',
          variable: { type: 'Identifier', name: 'i' },
          start: { type: 'NumericLiteral', value: 26, raw: '26' },
          end: { type: 'NumericLiteral', value: 5000, raw: '5000' },
          step: null,
          body: [
            {
              type: 'LocalStatement',
              variables: [{ type: 'Identifier', name: 'n' }],
              init: [
                {
                  type: 'BinaryExpression',
                  operator: '%',
                  left: { type: 'Identifier', name: 'i' },
                  right: { type: 'NumericLiteral', value: 25, raw: '25' },
                },
              ],
            },
            {
              type: 'IfStatement',
              clauses: [
                {
                  type: 'IfClause',
                  condition: {
                    type: 'BinaryExpression',
                    operator: '==',
                    left: { type: 'Identifier', name: 'n' },
                    right: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                  body: [
                    {
                      type: 'AssignmentStatement',
                      variables: [{ type: 'Identifier', name: 'n' }],
                      init: [{ type: 'NumericLiteral', value: 25, raw: '25' }],
                    },
                  ],
                },
              ],
            },
            {
              type: 'AssignmentStatement',
              variables: [
                {
                  type: 'IndexExpression',
                  base: { type: 'Identifier', name: 'level_to_elite_spawn_types' },
                  index: { type: 'Identifier', name: 'i' },
                },
              ],
              init: [
                {
                  type: 'IndexExpression',
                  base: { type: 'Identifier', name: 'level_to_elite_spawn_types' },
                  index: { type: 'Identifier', name: 'n' },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'level_to_shop_odds' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 1, raw: '1' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 70, raw: '70' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 0, raw: '0' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 2, raw: '2' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 50, raw: '50' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 3, raw: '3' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 45, raw: '45' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 4, raw: '4' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 10, raw: '10' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 25, raw: '25' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 45, raw: '45' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 20, raw: '20' } },
                    ],
                  },
                },
                {
                  type: 'TableKey',
                  key: { type: 'NumericLiteral', value: 5, raw: '5' },
                  value: {
                    type: 'TableConstructorExpression',
                    fields: [
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 5, raw: '5' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 15, raw: '15' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 30, raw: '30' } },
                      { type: 'TableValue', value: { type: 'NumericLiteral', value: 50, raw: '50' } },
                    ],
                  },
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'get_shop_odds' }],
          init: [
            {
              type: 'FunctionDeclaration',
              identifier: null,
              isLocal: false,
              parameters: [
                { type: 'Identifier', name: 'lvl' },
                { type: 'Identifier', name: 'tier' },
              ],
              body: [
                {
                  type: 'IfStatement',
                  clauses: [
                    {
                      type: 'IfClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 1, raw: '1' },
                      },
                      body: [
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 1, raw: '1' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 70, raw: '70' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 20, raw: '20' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 3, raw: '3' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 10, raw: '10' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 4, raw: '4' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      type: 'ElseifClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                      },
                      body: [
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 1, raw: '1' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 50, raw: '50' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 30, raw: '30' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 3, raw: '3' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 15, raw: '15' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 4, raw: '4' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 5, raw: '5' }],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      type: 'ElseifClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 3, raw: '3' },
                      },
                      body: [
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 1, raw: '1' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 25, raw: '25' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 45, raw: '45' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 3, raw: '3' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 20, raw: '20' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 4, raw: '4' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 10, raw: '10' }],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      type: 'ElseifClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 4, raw: '4' },
                      },
                      body: [
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 1, raw: '1' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 10, raw: '10' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 25, raw: '25' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 3, raw: '3' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 45, raw: '45' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 4, raw: '4' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 20, raw: '20' }],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      type: 'ElseifClause',
                      condition: {
                        type: 'BinaryExpression',
                        operator: '==',
                        left: { type: 'Identifier', name: 'lvl' },
                        right: { type: 'NumericLiteral', value: 5, raw: '5' },
                      },
                      body: [
                        {
                          type: 'IfStatement',
                          clauses: [
                            {
                              type: 'IfClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 1, raw: '1' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 5, raw: '5' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 15, raw: '15' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 3, raw: '3' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 30, raw: '30' }],
                                },
                              ],
                            },
                            {
                              type: 'ElseifClause',
                              condition: {
                                type: 'BinaryExpression',
                                operator: '==',
                                left: { type: 'Identifier', name: 'tier' },
                                right: { type: 'NumericLiteral', value: 4, raw: '4' },
                              },
                              body: [
                                {
                                  type: 'ReturnStatement',
                                  arguments: [{ type: 'NumericLiteral', value: 50, raw: '50' }],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'unlevellable_items' }],
          init: [
            {
              type: 'TableConstructorExpression',
              fields: [
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'speed_3'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'damage_4'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'shoot_5'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'death_6'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'lasting_7'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'kinetic_bomb'" } },
                {
                  type: 'TableValue',
                  value: { type: 'StringLiteral', value: null, raw: "'porcupine_technique'" },
                },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'last_stand'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'annihilation'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'tremor'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'heavy_impact'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'fracture'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'meat_shield'" } },
                {
                  type: 'TableValue',
                  value: { type: 'StringLiteral', value: null, raw: "'divine_punishment'" },
                },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'unleash'" } },
                {
                  type: 'TableValue',
                  value: { type: 'StringLiteral', value: null, raw: "'freezing_field'" },
                },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'burning_field'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'gravity_field'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'magnetism'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'insurance'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'dividends'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'haste'" } },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'rearm'" } },
                {
                  type: 'TableValue',
                  value: { type: 'StringLiteral', value: null, raw: "'ceremonial_dagger'" },
                },
                {
                  type: 'TableValue',
                  value: { type: 'StringLiteral', value: null, raw: "'burning_strike'" },
                },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'lucky_strike'" } },
                {
                  type: 'TableValue',
                  value: { type: 'StringLiteral', value: null, raw: "'healing_strike'" },
                },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'psycholeak'" } },
                {
                  type: 'TableValue',
                  value: { type: 'StringLiteral', value: null, raw: "'divine_blessing'" },
                },
                { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'hardening'" } },
              ],
            },
          ],
        },
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: '.',
              identifier: { type: 'Identifier', name: 'requestCurrentStats' },
              base: {
                type: 'MemberExpression',
                indexer: '.',
                identifier: { type: 'Identifier', name: 'userStats' },
                base: { type: 'Identifier', name: 'steam' },
              },
            },
            arguments: [],
          },
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'new_game_plus' }],
          init: [
            {
              type: 'LogicalExpression',
              operator: 'or',
              left: {
                type: 'MemberExpression',
                indexer: '.',
                identifier: { type: 'Identifier', name: 'new_game_plus' },
                base: { type: 'Identifier', name: 'state' },
              },
              right: { type: 'NumericLiteral', value: 0, raw: '0' },
            },
          ],
        },
        {
          type: 'IfStatement',
          clauses: [
            {
              type: 'IfClause',
              condition: {
                type: 'UnaryExpression',
                operator: 'not',
                argument: {
                  type: 'MemberExpression',
                  indexer: '.',
                  identifier: { type: 'Identifier', name: 'new_game_plus' },
                  base: { type: 'Identifier', name: 'state' },
                },
              },
              body: [
                {
                  type: 'AssignmentStatement',
                  variables: [
                    {
                      type: 'MemberExpression',
                      indexer: '.',
                      identifier: { type: 'Identifier', name: 'new_game_plus' },
                      base: { type: 'Identifier', name: 'state' },
                    },
                  ],
                  init: [{ type: 'Identifier', name: 'new_game_plus' }],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'current_new_game_plus' }],
          init: [
            {
              type: 'LogicalExpression',
              operator: 'or',
              left: {
                type: 'MemberExpression',
                indexer: '.',
                identifier: { type: 'Identifier', name: 'current_new_game_plus' },
                base: { type: 'Identifier', name: 'state' },
              },
              right: { type: 'Identifier', name: 'new_game_plus' },
            },
          ],
        },
        {
          type: 'IfStatement',
          clauses: [
            {
              type: 'IfClause',
              condition: {
                type: 'UnaryExpression',
                operator: 'not',
                argument: {
                  type: 'MemberExpression',
                  indexer: '.',
                  identifier: { type: 'Identifier', name: 'current_new_game_plus' },
                  base: { type: 'Identifier', name: 'state' },
                },
              },
              body: [
                {
                  type: 'AssignmentStatement',
                  variables: [
                    {
                      type: 'MemberExpression',
                      indexer: '.',
                      identifier: { type: 'Identifier', name: 'current_new_game_plus' },
                      base: { type: 'Identifier', name: 'state' },
                    },
                  ],
                  init: [{ type: 'Identifier', name: 'current_new_game_plus' }],
                },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'max_units' }],
          init: [
            {
              type: 'CallExpression',
              base: {
                type: 'MemberExpression',
                indexer: '.',
                identifier: { type: 'Identifier', name: 'clamp' },
                base: { type: 'Identifier', name: 'math' },
              },
              arguments: [
                {
                  type: 'BinaryExpression',
                  operator: '+',
                  left: { type: 'NumericLiteral', value: 7, raw: '7' },
                  right: { type: 'Identifier', name: 'current_new_game_plus' },
                },
                { type: 'NumericLiteral', value: 7, raw: '7' },
                { type: 'NumericLiteral', value: 12, raw: '12' },
              ],
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'main_song_instance' }],
          init: [
            {
              type: 'TableCallExpression',
              base: {
                type: 'MemberExpression',
                indexer: ':',
                identifier: { type: 'Identifier', name: 'play' },
                base: {
                  type: 'IndexExpression',
                  base: { type: 'Identifier', name: '_G' },
                  index: {
                    type: 'TableCallExpression',
                    base: {
                      type: 'MemberExpression',
                      indexer: ':',
                      identifier: { type: 'Identifier', name: 'table' },
                      base: { type: 'Identifier', name: 'random' },
                    },
                    arguments: {
                      type: 'TableConstructorExpression',
                      fields: [
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'song1'" } },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'song2'" } },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'song3'" } },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'song4'" } },
                        { type: 'TableValue', value: { type: 'StringLiteral', value: null, raw: "'song5'" } },
                      ],
                    },
                  },
                },
              },
              arguments: {
                type: 'TableConstructorExpression',
                fields: [
                  {
                    type: 'TableKeyString',
                    key: { type: 'Identifier', name: 'volume' },
                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                  },
                ],
              },
            },
          ],
        },
        {
          type: 'AssignmentStatement',
          variables: [{ type: 'Identifier', name: 'main' }],
          init: [{ type: 'CallExpression', base: { type: 'Identifier', name: 'Main' }, arguments: [] }],
        },
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'add' },
              base: { type: 'Identifier', name: 'main' },
            },
            arguments: [
              {
                type: 'StringCallExpression',
                base: { type: 'Identifier', name: 'MainMenu' },
                argument: { type: 'StringLiteral', value: null, raw: "'mainmenu'" },
              },
            ],
          },
        },
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'go_to' },
              base: { type: 'Identifier', name: 'main' },
            },
            arguments: [{ type: 'StringLiteral', value: null, raw: "'mainmenu'" }],
          },
        },
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'every' },
              base: { type: 'Identifier', name: 'trigger' },
            },
            arguments: [
              { type: 'NumericLiteral', value: 2, raw: '2' },
              {
                type: 'FunctionDeclaration',
                identifier: null,
                isLocal: false,
                parameters: [],
                body: [
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: { type: 'Identifier', name: 'debugging_memory' },
                        body: [
                          {
                            type: 'ForGenericStatement',
                            variables: [
                              { type: 'Identifier', name: 'k' },
                              { type: 'Identifier', name: 'v' },
                            ],
                            iterators: [
                              {
                                type: 'CallExpression',
                                base: { type: 'Identifier', name: 'pairs' },
                                arguments: [
                                  {
                                    type: 'CallExpression',
                                    base: {
                                      type: 'MemberExpression',
                                      indexer: '.',
                                      identifier: { type: 'Identifier', name: 'type_count' },
                                      base: { type: 'Identifier', name: 'system' },
                                    },
                                    arguments: [],
                                  },
                                ],
                              },
                            ],
                            body: [
                              {
                                type: 'CallStatement',
                                expression: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'print' },
                                  arguments: [
                                    { type: 'Identifier', name: 'k' },
                                    { type: 'Identifier', name: 'v' },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            type: 'CallStatement',
                            expression: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'print' },
                              arguments: [
                                {
                                  type: 'BinaryExpression',
                                  operator: '..',
                                  left: { type: 'StringLiteral', value: null, raw: '"-- "' },
                                  right: {
                                    type: 'BinaryExpression',
                                    operator: '..',
                                    left: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'round' },
                                        base: { type: 'Identifier', name: 'math' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '/',
                                          left: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tonumber' },
                                            arguments: [
                                              {
                                                type: 'CallExpression',
                                                base: { type: 'Identifier', name: 'collectgarbage' },
                                                arguments: [{ type: 'StringLiteral', value: null, raw: '"count"' }],
                                              },
                                            ],
                                          },
                                          right: { type: 'NumericLiteral', value: 1024, raw: '1024' },
                                        },
                                        { type: 'NumericLiteral', value: 3, raw: '3' },
                                      ],
                                    },
                                    right: { type: 'StringLiteral', value: null, raw: '"MB --"' },
                                  },
                                },
                              ],
                            },
                          },
                          {
                            type: 'CallStatement',
                            expression: {
                              type: 'CallExpression',
                              base: { type: 'Identifier', name: 'print' },
                              arguments: [],
                            },
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
    },
    {
      type: 'FunctionDeclaration',
      identifier: { type: 'Identifier', name: 'update' },
      isLocal: false,
      parameters: [{ type: 'Identifier', name: 'dt' }],
      body: [
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'update' },
              base: { type: 'Identifier', name: 'main' },
            },
            arguments: [{ type: 'Identifier', name: 'dt' }],
          },
        },
        {
          type: 'IfStatement',
          clauses: [
            {
              type: 'IfClause',
              condition: {
                type: 'MemberExpression',
                indexer: '.',
                identifier: { type: 'Identifier', name: 'pressed' },
                base: {
                  type: 'MemberExpression',
                  indexer: '.',
                  identifier: { type: 'Identifier', name: 'k' },
                  base: { type: 'Identifier', name: 'input' },
                },
              },
              body: [
                {
                  type: 'IfStatement',
                  clauses: [
                    {
                      type: 'IfClause',
                      condition: {
                        type: 'LogicalExpression',
                        operator: 'and',
                        left: {
                          type: 'BinaryExpression',
                          operator: '>',
                          left: { type: 'Identifier', name: 'sx' },
                          right: { type: 'NumericLiteral', value: 1, raw: '1' },
                        },
                        right: {
                          type: 'BinaryExpression',
                          operator: '>',
                          left: { type: 'Identifier', name: 'sy' },
                          right: { type: 'NumericLiteral', value: 1, raw: '1' },
                        },
                      },
                      body: [
                        {
                          type: 'AssignmentStatement',
                          variables: [
                            { type: 'Identifier', name: 'sx' },
                            { type: 'Identifier', name: 'sy' },
                          ],
                          init: [
                            {
                              type: 'BinaryExpression',
                              operator: '-',
                              left: { type: 'Identifier', name: 'sx' },
                              right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                            },
                            {
                              type: 'BinaryExpression',
                              operator: '-',
                              left: { type: 'Identifier', name: 'sy' },
                              right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                            },
                          ],
                        },
                        {
                          type: 'CallStatement',
                          expression: {
                            type: 'CallExpression',
                            base: {
                              type: 'MemberExpression',
                              indexer: '.',
                              identifier: { type: 'Identifier', name: 'setMode' },
                              base: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'window' },
                                base: { type: 'Identifier', name: 'love' },
                              },
                            },
                            arguments: [
                              {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 480, raw: '480' },
                                right: { type: 'Identifier', name: 'sx' },
                              },
                              {
                                type: 'BinaryExpression',
                                operator: '*',
                                left: { type: 'NumericLiteral', value: 270, raw: '270' },
                                right: { type: 'Identifier', name: 'sy' },
                              },
                            ],
                          },
                        },
                        {
                          type: 'AssignmentStatement',
                          variables: [
                            {
                              type: 'MemberExpression',
                              indexer: '.',
                              identifier: { type: 'Identifier', name: 'sx' },
                              base: { type: 'Identifier', name: 'state' },
                            },
                            {
                              type: 'MemberExpression',
                              indexer: '.',
                              identifier: { type: 'Identifier', name: 'sy' },
                              base: { type: 'Identifier', name: 'state' },
                            },
                          ],
                          init: [
                            { type: 'Identifier', name: 'sx' },
                            { type: 'Identifier', name: 'sy' },
                          ],
                        },
                        {
                          type: 'AssignmentStatement',
                          variables: [
                            {
                              type: 'MemberExpression',
                              indexer: '.',
                              identifier: { type: 'Identifier', name: 'fullscreen' },
                              base: { type: 'Identifier', name: 'state' },
                            },
                          ],
                          init: [{ type: 'BooleanLiteral', value: false, raw: 'false' }],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          type: 'IfStatement',
          clauses: [
            {
              type: 'IfClause',
              condition: {
                type: 'MemberExpression',
                indexer: '.',
                identifier: { type: 'Identifier', name: 'pressed' },
                base: {
                  type: 'MemberExpression',
                  indexer: '.',
                  identifier: { type: 'Identifier', name: 'l' },
                  base: { type: 'Identifier', name: 'input' },
                },
              },
              body: [
                {
                  type: 'AssignmentStatement',
                  variables: [
                    { type: 'Identifier', name: 'sx' },
                    { type: 'Identifier', name: 'sy' },
                  ],
                  init: [
                    {
                      type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sx' },
                      right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                    },
                    {
                      type: 'BinaryExpression',
                      operator: '+',
                      left: { type: 'Identifier', name: 'sy' },
                      right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                    },
                  ],
                },
                {
                  type: 'CallStatement',
                  expression: {
                    type: 'CallExpression',
                    base: {
                      type: 'MemberExpression',
                      indexer: '.',
                      identifier: { type: 'Identifier', name: 'setMode' },
                      base: {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'window' },
                        base: { type: 'Identifier', name: 'love' },
                      },
                    },
                    arguments: [
                      {
                        type: 'BinaryExpression',
                        operator: '*',
                        left: { type: 'NumericLiteral', value: 480, raw: '480' },
                        right: { type: 'Identifier', name: 'sx' },
                      },
                      {
                        type: 'BinaryExpression',
                        operator: '*',
                        left: { type: 'NumericLiteral', value: 270, raw: '270' },
                        right: { type: 'Identifier', name: 'sy' },
                      },
                    ],
                  },
                },
                {
                  type: 'AssignmentStatement',
                  variables: [
                    {
                      type: 'MemberExpression',
                      indexer: '.',
                      identifier: { type: 'Identifier', name: 'sx' },
                      base: { type: 'Identifier', name: 'state' },
                    },
                    {
                      type: 'MemberExpression',
                      indexer: '.',
                      identifier: { type: 'Identifier', name: 'sy' },
                      base: { type: 'Identifier', name: 'state' },
                    },
                  ],
                  init: [
                    { type: 'Identifier', name: 'sx' },
                    { type: 'Identifier', name: 'sy' },
                  ],
                },
                {
                  type: 'AssignmentStatement',
                  variables: [
                    {
                      type: 'MemberExpression',
                      indexer: '.',
                      identifier: { type: 'Identifier', name: 'fullscreen' },
                      base: { type: 'Identifier', name: 'state' },
                    },
                  ],
                  init: [{ type: 'BooleanLiteral', value: false, raw: 'false' }],
                },
              ],
            },
          ],
        },
      ],
    },
    {
      type: 'FunctionDeclaration',
      identifier: { type: 'Identifier', name: 'draw' },
      isLocal: false,
      parameters: [],
      body: [
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: { type: 'Identifier', name: 'shared_draw' },
            arguments: [
              {
                type: 'FunctionDeclaration',
                identifier: null,
                isLocal: false,
                parameters: [],
                body: [
                  {
                    type: 'CallStatement',
                    expression: {
                      type: 'CallExpression',
                      base: {
                        type: 'MemberExpression',
                        indexer: ':',
                        identifier: { type: 'Identifier', name: 'draw' },
                        base: { type: 'Identifier', name: 'main' },
                      },
                      arguments: [],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
    },
    {
      type: 'FunctionDeclaration',
      identifier: { type: 'Identifier', name: 'open_options' },
      isLocal: false,
      parameters: [{ type: 'Identifier', name: 'self' }],
      body: [
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'set_mouse_visible' },
              base: { type: 'Identifier', name: 'input' },
            },
            arguments: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
          },
        },
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'tween' },
              base: { type: 'Identifier', name: 'trigger' },
            },
            arguments: [
              { type: 'NumericLiteral', value: 0.25, raw: '0.25' },
              { type: 'Identifier', name: '_G' },
              {
                type: 'TableConstructorExpression',
                fields: [
                  {
                    type: 'TableKeyString',
                    key: { type: 'Identifier', name: 'slow_amount' },
                    value: { type: 'NumericLiteral', value: 0, raw: '0' },
                  },
                ],
              },
              {
                type: 'MemberExpression',
                indexer: '.',
                identifier: { type: 'Identifier', name: 'linear' },
                base: { type: 'Identifier', name: 'math' },
              },
              {
                type: 'FunctionDeclaration',
                identifier: null,
                isLocal: false,
                parameters: [],
                body: [
                  {
                    type: 'AssignmentStatement',
                    variables: [{ type: 'Identifier', name: 'slow_amount' }],
                    init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'paused' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'CallExpression',
                          base: {
                            type: 'MemberExpression',
                            indexer: ':',
                            identifier: { type: 'Identifier', name: 'is' },
                            base: { type: 'Identifier', name: 'self' },
                          },
                          arguments: [{ type: 'Identifier', name: 'Arena' }],
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'paused_t1' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [
                              {
                                type: 'TableCallExpression',
                                base: { type: 'Identifier', name: 'Text2' },
                                arguments: {
                                  type: 'TableConstructorExpression',
                                  fields: [
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'group' },
                                      value: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'ui' },
                                        base: { type: 'Identifier', name: 'self' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'x' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '/',
                                        left: { type: 'Identifier', name: 'gw' },
                                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'y' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: {
                                          type: 'BinaryExpression',
                                          operator: '/',
                                          left: { type: 'Identifier', name: 'gh' },
                                          right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                        },
                                        right: { type: 'NumericLiteral', value: 108, raw: '108' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'sx' },
                                      value: { type: 'NumericLiteral', value: 0.6, raw: '0.6' },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'sy' },
                                      value: { type: 'NumericLiteral', value: 0.6, raw: '0.6' },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'lines' },
                                      value: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableValue',
                                            value: {
                                              type: 'TableConstructorExpression',
                                              fields: [
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'text' },
                                                  value: {
                                                    type: 'StringLiteral',
                                                    value: null,
                                                    raw: "'[bg10]<-, a or m1       ->, d or m2'",
                                                  },
                                                },
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'font' },
                                                  value: { type: 'Identifier', name: 'fat_font' },
                                                },
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'alignment' },
                                                  value: { type: 'StringLiteral', value: null, raw: "'center'" },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'paused_t2' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [
                              {
                                type: 'TableCallExpression',
                                base: { type: 'Identifier', name: 'Text2' },
                                arguments: {
                                  type: 'TableConstructorExpression',
                                  fields: [
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'group' },
                                      value: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'ui' },
                                        base: { type: 'Identifier', name: 'self' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'x' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '/',
                                        left: { type: 'Identifier', name: 'gw' },
                                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'y' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: {
                                          type: 'BinaryExpression',
                                          operator: '/',
                                          left: { type: 'Identifier', name: 'gh' },
                                          right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                        },
                                        right: { type: 'NumericLiteral', value: 92, raw: '92' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'lines' },
                                      value: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableValue',
                                            value: {
                                              type: 'TableConstructorExpression',
                                              fields: [
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'text' },
                                                  value: {
                                                    type: 'StringLiteral',
                                                    value: null,
                                                    raw: "'[bg10]turn left                                            turn right'",
                                                  },
                                                },
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'font' },
                                                  value: { type: 'Identifier', name: 'pixul_font' },
                                                },
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'alignment' },
                                                  value: { type: 'StringLiteral', value: null, raw: "'center'" },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'CallExpression',
                          base: {
                            type: 'MemberExpression',
                            indexer: ':',
                            identifier: { type: 'Identifier', name: 'is' },
                            base: { type: 'Identifier', name: 'self' },
                          },
                          arguments: [{ type: 'Identifier', name: 'MainMenu' }],
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ng_t' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [
                              {
                                type: 'TableCallExpression',
                                base: { type: 'Identifier', name: 'Text2' },
                                arguments: {
                                  type: 'TableConstructorExpression',
                                  fields: [
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'group' },
                                      value: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'ui' },
                                        base: { type: 'Identifier', name: 'self' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'x' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '+',
                                        left: {
                                          type: 'BinaryExpression',
                                          operator: '/',
                                          left: { type: 'Identifier', name: 'gw' },
                                          right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                        },
                                        right: { type: 'NumericLiteral', value: 63, raw: '63' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'y' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: { type: 'Identifier', name: 'gh' },
                                        right: { type: 'NumericLiteral', value: 50, raw: '50' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'lines' },
                                      value: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableValue',
                                            value: {
                                              type: 'TableConstructorExpression',
                                              fields: [
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'text' },
                                                  value: {
                                                    type: 'BinaryExpression',
                                                    operator: '..',
                                                    left: {
                                                      type: 'StringLiteral',
                                                      value: null,
                                                      raw: "'[bg10]current: '",
                                                    },
                                                    right: { type: 'Identifier', name: 'current_new_game_plus' },
                                                  },
                                                },
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'font' },
                                                  value: { type: 'Identifier', name: 'pixul_font' },
                                                },
                                                {
                                                  type: 'TableKeyString',
                                                  key: { type: 'Identifier', name: 'alignment' },
                                                  value: { type: 'StringLiteral', value: null, raw: "'center'" },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'resume_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '/',
                                left: { type: 'Identifier', name: 'gw' },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 225, raw: '225' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'LogicalExpression',
                                operator: 'or',
                                left: {
                                  type: 'LogicalExpression',
                                  operator: 'and',
                                  left: {
                                    type: 'CallExpression',
                                    base: {
                                      type: 'MemberExpression',
                                      indexer: ':',
                                      identifier: { type: 'Identifier', name: 'is' },
                                      base: { type: 'Identifier', name: 'self' },
                                    },
                                    arguments: [{ type: 'Identifier', name: 'MainMenu' }],
                                  },
                                  right: { type: 'StringLiteral', value: null, raw: "'main menu (esc)'" },
                                },
                                right: { type: 'StringLiteral', value: null, raw: "'resume game (esc)'" },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'tween' },
                                        base: { type: 'Identifier', name: 'trigger' },
                                      },
                                      arguments: [
                                        { type: 'NumericLiteral', value: 0.25, raw: '0.25' },
                                        { type: 'Identifier', name: '_G' },
                                        {
                                          type: 'TableConstructorExpression',
                                          fields: [
                                            {
                                              type: 'TableKeyString',
                                              key: { type: 'Identifier', name: 'slow_amount' },
                                              value: { type: 'NumericLiteral', value: 1, raw: '1' },
                                            },
                                          ],
                                        },
                                        {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'linear' },
                                          base: { type: 'Identifier', name: 'math' },
                                        },
                                        {
                                          type: 'FunctionDeclaration',
                                          identifier: null,
                                          isLocal: false,
                                          parameters: [],
                                          body: [
                                            {
                                              type: 'AssignmentStatement',
                                              variables: [{ type: 'Identifier', name: 'slow_amount' }],
                                              init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                            },
                                            {
                                              type: 'AssignmentStatement',
                                              variables: [
                                                {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'paused' },
                                                  base: { type: 'Identifier', name: 'self' },
                                                },
                                              ],
                                              init: [{ type: 'BooleanLiteral', value: false, raw: 'false' }],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'paused_t1' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: { type: 'Identifier', name: 'paused_t1' },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'paused_t1' },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'paused_t2' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: { type: 'Identifier', name: 'paused_t2' },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'paused_t2' },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'ng_t' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: { type: 'Identifier', name: 'ng_t' },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'ng_t' },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'resume_button' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'resume_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'resume_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'restart_button' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'restart_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'restart_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'mouse_button' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'mouse_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'mouse_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: {
                                                      type: 'Identifier',
                                                      name: 'dark_transition_button',
                                                    },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'dark_transition_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'dark_transition_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'run_timer_button' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'run_timer_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'run_timer_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'sfx_button' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'sfx_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'sfx_button' },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'music_button' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'music_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'music_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'video_button_1' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'video_button_1',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'video_button_1',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'video_button_2' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'video_button_2',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'video_button_2',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'video_button_3' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'video_button_3',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'video_button_3',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'video_button_4' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'video_button_4',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'video_button_4',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'quit_button' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'quit_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'quit_button' },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: {
                                                      type: 'Identifier',
                                                      name: 'screen_shake_button',
                                                    },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'screen_shake_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'screen_shake_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: {
                                                      type: 'Identifier',
                                                      name: 'screen_movement_button',
                                                    },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'screen_movement_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'screen_movement_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: {
                                                      type: 'Identifier',
                                                      name: 'cooldown_snake_button',
                                                    },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'cooldown_snake_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'cooldown_snake_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: {
                                                      type: 'Identifier',
                                                      name: 'arrow_snake_button',
                                                    },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'arrow_snake_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'arrow_snake_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: {
                                                      type: 'Identifier',
                                                      name: 'ng_plus_plus_button',
                                                    },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'ng_plus_plus_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'ng_plus_plus_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: {
                                                      type: 'Identifier',
                                                      name: 'ng_plus_minus_button',
                                                    },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'ng_plus_minus_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'ng_plus_minus_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'main_menu_button' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: { type: 'Identifier', name: 'dead' },
                                                          base: {
                                                            type: 'MemberExpression',
                                                            indexer: '.',
                                                            identifier: {
                                                              type: 'Identifier',
                                                              name: 'main_menu_button',
                                                            },
                                                            base: { type: 'Identifier', name: 'self' },
                                                          },
                                                        },
                                                      ],
                                                      init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                                    },
                                                    {
                                                      type: 'AssignmentStatement',
                                                      variables: [
                                                        {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'main_menu_button',
                                                          },
                                                          base: { type: 'Identifier', name: 'self' },
                                                        },
                                                      ],
                                                      init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              type: 'CallStatement',
                                              expression: {
                                                type: 'CallExpression',
                                                base: {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'save_state' },
                                                  base: { type: 'Identifier', name: 'system' },
                                                },
                                                arguments: [],
                                              },
                                            },
                                            {
                                              type: 'IfStatement',
                                              clauses: [
                                                {
                                                  type: 'IfClause',
                                                  condition: {
                                                    type: 'LogicalExpression',
                                                    operator: 'or',
                                                    left: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'is' },
                                                        base: { type: 'Identifier', name: 'self' },
                                                      },
                                                      arguments: [{ type: 'Identifier', name: 'MainMenu' }],
                                                    },
                                                    right: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'is' },
                                                        base: { type: 'Identifier', name: 'self' },
                                                      },
                                                      arguments: [{ type: 'Identifier', name: 'BuyScreen' }],
                                                    },
                                                  },
                                                  body: [
                                                    {
                                                      type: 'CallStatement',
                                                      expression: {
                                                        type: 'CallExpression',
                                                        base: {
                                                          type: 'MemberExpression',
                                                          indexer: ':',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'set_mouse_visible',
                                                          },
                                                          base: { type: 'Identifier', name: 'input' },
                                                        },
                                                        arguments: [
                                                          { type: 'BooleanLiteral', value: true, raw: 'true' },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                                {
                                                  type: 'ElseifClause',
                                                  condition: {
                                                    type: 'CallExpression',
                                                    base: {
                                                      type: 'MemberExpression',
                                                      indexer: ':',
                                                      identifier: { type: 'Identifier', name: 'is' },
                                                      base: { type: 'Identifier', name: 'self' },
                                                    },
                                                    arguments: [{ type: 'Identifier', name: 'Arena' }],
                                                  },
                                                  body: [
                                                    {
                                                      type: 'CallStatement',
                                                      expression: {
                                                        type: 'CallExpression',
                                                        base: {
                                                          type: 'MemberExpression',
                                                          indexer: ':',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'set_mouse_visible',
                                                          },
                                                          base: { type: 'Identifier', name: 'input' },
                                                        },
                                                        arguments: [
                                                          {
                                                            type: 'LogicalExpression',
                                                            operator: 'or',
                                                            left: {
                                                              type: 'MemberExpression',
                                                              indexer: '.',
                                                              identifier: {
                                                                type: 'Identifier',
                                                                name: 'mouse_control',
                                                              },
                                                              base: { type: 'Identifier', name: 'state' },
                                                            },
                                                            right: {
                                                              type: 'BooleanLiteral',
                                                              value: false,
                                                              raw: 'false',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                          ],
                                        },
                                        { type: 'StringLiteral', value: null, raw: "'pause'" },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'UnaryExpression',
                          operator: 'not',
                          argument: {
                            type: 'CallExpression',
                            base: {
                              type: 'MemberExpression',
                              indexer: ':',
                              identifier: { type: 'Identifier', name: 'is' },
                              base: { type: 'Identifier', name: 'self' },
                            },
                            arguments: [{ type: 'Identifier', name: 'MainMenu' }],
                          },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'restart_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [
                              {
                                type: 'TableCallExpression',
                                base: { type: 'Identifier', name: 'Button' },
                                arguments: {
                                  type: 'TableConstructorExpression',
                                  fields: [
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'group' },
                                      value: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'ui' },
                                        base: { type: 'Identifier', name: 'self' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'x' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '/',
                                        left: { type: 'Identifier', name: 'gw' },
                                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'y' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: { type: 'Identifier', name: 'gh' },
                                        right: { type: 'NumericLiteral', value: 200, raw: '200' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'force_update' },
                                      value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'button_text' },
                                      value: { type: 'StringLiteral', value: null, raw: "'restart run (r)'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'fg_color' },
                                      value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'bg_color' },
                                      value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'action' },
                                      value: {
                                        type: 'FunctionDeclaration',
                                        identifier: null,
                                        isLocal: false,
                                        parameters: [{ type: 'Identifier', name: 'b' }],
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'transitioning' },
                                                base: { type: 'Identifier', name: 'self' },
                                              },
                                            ],
                                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_transition2' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_switch2' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_switch1' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: { type: 'Identifier', name: 'TransitionEffect' },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'group' },
                                                    value: {
                                                      type: 'MemberExpression',
                                                      indexer: '.',
                                                      identifier: { type: 'Identifier', name: 'transitions' },
                                                      base: { type: 'Identifier', name: 'main' },
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'x' },
                                                    value: {
                                                      type: 'BinaryExpression',
                                                      operator: '/',
                                                      left: { type: 'Identifier', name: 'gw' },
                                                      right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'y' },
                                                    value: {
                                                      type: 'BinaryExpression',
                                                      operator: '/',
                                                      left: { type: 'Identifier', name: 'gh' },
                                                      right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'color' },
                                                    value: {
                                                      type: 'LogicalExpression',
                                                      operator: 'or',
                                                      left: {
                                                        type: 'LogicalExpression',
                                                        operator: 'and',
                                                        left: {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'dark_transitions',
                                                          },
                                                          base: { type: 'Identifier', name: 'state' },
                                                        },
                                                        right: {
                                                          type: 'IndexExpression',
                                                          base: { type: 'Identifier', name: 'bg' },
                                                          index: {
                                                            type: 'UnaryExpression',
                                                            operator: '-',
                                                            argument: {
                                                              type: 'NumericLiteral',
                                                              value: 2,
                                                              raw: '2',
                                                            },
                                                          },
                                                        },
                                                      },
                                                      right: {
                                                        type: 'IndexExpression',
                                                        base: { type: 'Identifier', name: 'fg' },
                                                        index: { type: 'NumericLiteral', value: 0, raw: '0' },
                                                      },
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'transition_action' },
                                                    value: {
                                                      type: 'FunctionDeclaration',
                                                      identifier: null,
                                                      isLocal: false,
                                                      parameters: [],
                                                      body: [
                                                        {
                                                          type: 'AssignmentStatement',
                                                          variables: [{ type: 'Identifier', name: 'slow_amount' }],
                                                          init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                                        },
                                                        {
                                                          type: 'AssignmentStatement',
                                                          variables: [
                                                            { type: 'Identifier', name: 'music_slow_amount' },
                                                          ],
                                                          init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                                        },
                                                        {
                                                          type: 'AssignmentStatement',
                                                          variables: [{ type: 'Identifier', name: 'run_time' }],
                                                          init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                                        },
                                                        {
                                                          type: 'AssignmentStatement',
                                                          variables: [{ type: 'Identifier', name: 'gold' }],
                                                          init: [{ type: 'NumericLiteral', value: 3, raw: '3' }],
                                                        },
                                                        {
                                                          type: 'AssignmentStatement',
                                                          variables: [{ type: 'Identifier', name: 'passives' }],
                                                          init: [{ type: 'TableConstructorExpression', fields: [] }],
                                                        },
                                                        {
                                                          type: 'CallStatement',
                                                          expression: {
                                                            type: 'CallExpression',
                                                            base: {
                                                              type: 'MemberExpression',
                                                              indexer: ':',
                                                              identifier: { type: 'Identifier', name: 'stop' },
                                                              base: {
                                                                type: 'Identifier',
                                                                name: 'main_song_instance',
                                                              },
                                                            },
                                                            arguments: [],
                                                          },
                                                        },
                                                        {
                                                          type: 'AssignmentStatement',
                                                          variables: [{ type: 'Identifier', name: 'run_passive_pool' }],
                                                          init: [
                                                            {
                                                              type: 'TableConstructorExpression',
                                                              fields: [
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'centipede'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'ouroboros_technique_r'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'ouroboros_technique_l'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'amplify'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'resonance'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'ballista'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'call_of_the_void'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'crucio'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'speed_3'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'damage_4'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'shoot_5'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'death_6'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'lasting_7'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'defensive_stance'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'offensive_stance'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'kinetic_bomb'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'porcupine_technique'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'last_stand'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'seeping'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'deceleration'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'annihilation'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'malediction'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'hextouch'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'whispers_of_doom'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'tremor'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'heavy_impact'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'fracture'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'meat_shield'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'hive'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'baneling_burst'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'blunt_arrow'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'explosive_arrow'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'divine_machine_arrow'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'chronomancy'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'awakening'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'divine_punishment'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'assassination'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'flying_daggers'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'ultimatum'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'magnify'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'echo_barrage'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'unleash'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'reinforce'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'payback'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'enchanted'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'freezing_field'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'burning_field'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'gravity_field'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'magnetism'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'insurance'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'dividends'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'berserking'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'unwavering_stance'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'unrelenting_stance'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'blessing'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'haste'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'divine_barrage'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'orbitism'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'psyker_orbs'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'psychosink'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'rearm'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'taunt'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'construct_instability'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'intimidation'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'vulnerability'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'temporal_chains'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'ceremonial_dagger'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'homing_barrage'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'critical_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'noxious_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'infesting_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'burning_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'lucky_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'healing_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'stunning_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'silencing_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'culling_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'lightning_strike'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'psycholeak'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'divine_blessing'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'hardening'",
                                                                  },
                                                                },
                                                                {
                                                                  type: 'TableValue',
                                                                  value: {
                                                                    type: 'StringLiteral',
                                                                    value: null,
                                                                    raw: "'kinetic_strike'",
                                                                  },
                                                                },
                                                              ],
                                                            },
                                                          ],
                                                        },
                                                        {
                                                          type: 'AssignmentStatement',
                                                          variables: [{ type: 'Identifier', name: 'max_units' }],
                                                          init: [
                                                            {
                                                              type: 'CallExpression',
                                                              base: {
                                                                type: 'MemberExpression',
                                                                indexer: '.',
                                                                identifier: { type: 'Identifier', name: 'clamp' },
                                                                base: { type: 'Identifier', name: 'math' },
                                                              },
                                                              arguments: [
                                                                {
                                                                  type: 'BinaryExpression',
                                                                  operator: '+',
                                                                  left: {
                                                                    type: 'NumericLiteral',
                                                                    value: 7,
                                                                    raw: '7',
                                                                  },
                                                                  right: {
                                                                    type: 'Identifier',
                                                                    name: 'current_new_game_plus',
                                                                  },
                                                                },
                                                                { type: 'NumericLiteral', value: 7, raw: '7' },
                                                                { type: 'NumericLiteral', value: 12, raw: '12' },
                                                              ],
                                                            },
                                                          ],
                                                        },
                                                        {
                                                          type: 'CallStatement',
                                                          expression: {
                                                            type: 'CallExpression',
                                                            base: {
                                                              type: 'MemberExpression',
                                                              indexer: ':',
                                                              identifier: { type: 'Identifier', name: 'add' },
                                                              base: { type: 'Identifier', name: 'main' },
                                                            },
                                                            arguments: [
                                                              {
                                                                type: 'StringCallExpression',
                                                                base: { type: 'Identifier', name: 'BuyScreen' },
                                                                argument: {
                                                                  type: 'StringLiteral',
                                                                  value: null,
                                                                  raw: "'buy_screen'",
                                                                },
                                                              },
                                                            ],
                                                          },
                                                        },
                                                        {
                                                          type: 'AssignmentStatement',
                                                          variables: [{ type: 'Identifier', name: 'locked_state' }],
                                                          init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                                                        },
                                                        {
                                                          type: 'CallStatement',
                                                          expression: {
                                                            type: 'CallExpression',
                                                            base: {
                                                              type: 'MemberExpression',
                                                              indexer: '.',
                                                              identifier: {
                                                                type: 'Identifier',
                                                                name: 'save_run',
                                                              },
                                                              base: { type: 'Identifier', name: 'system' },
                                                            },
                                                            arguments: [],
                                                          },
                                                        },
                                                        {
                                                          type: 'CallStatement',
                                                          expression: {
                                                            type: 'CallExpression',
                                                            base: {
                                                              type: 'MemberExpression',
                                                              indexer: ':',
                                                              identifier: { type: 'Identifier', name: 'go_to' },
                                                              base: { type: 'Identifier', name: 'main' },
                                                            },
                                                            arguments: [
                                                              {
                                                                type: 'StringLiteral',
                                                                value: null,
                                                                raw: "'buy_screen'",
                                                              },
                                                              { type: 'NumericLiteral', value: 1, raw: '1' },
                                                              { type: 'NumericLiteral', value: 0, raw: '0' },
                                                              { type: 'TableConstructorExpression', fields: [] },
                                                              { type: 'Identifier', name: 'passives' },
                                                              { type: 'NumericLiteral', value: 1, raw: '1' },
                                                              { type: 'NumericLiteral', value: 0, raw: '0' },
                                                            ],
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'text' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: { type: 'Identifier', name: 'Text' },
                                                      arguments: [
                                                        {
                                                          type: 'TableConstructorExpression',
                                                          fields: [
                                                            {
                                                              type: 'TableValue',
                                                              value: {
                                                                type: 'TableConstructorExpression',
                                                                fields: [
                                                                  {
                                                                    type: 'TableKeyString',
                                                                    key: { type: 'Identifier', name: 'text' },
                                                                    value: {
                                                                      type: 'BinaryExpression',
                                                                      operator: '..',
                                                                      left: {
                                                                        type: 'StringLiteral',
                                                                        value: null,
                                                                        raw: "'[wavy, '",
                                                                      },
                                                                      right: {
                                                                        type: 'BinaryExpression',
                                                                        operator: '..',
                                                                        left: {
                                                                          type: 'CallExpression',
                                                                          base: {
                                                                            type: 'Identifier',
                                                                            name: 'tostring',
                                                                          },
                                                                          arguments: [
                                                                            {
                                                                              type: 'LogicalExpression',
                                                                              operator: 'or',
                                                                              left: {
                                                                                type: 'LogicalExpression',
                                                                                operator: 'and',
                                                                                left: {
                                                                                  type: 'MemberExpression',
                                                                                  indexer: '.',
                                                                                  identifier: {
                                                                                    type: 'Identifier',
                                                                                    name: 'dark_transitions',
                                                                                  },
                                                                                  base: {
                                                                                    type: 'Identifier',
                                                                                    name: 'state',
                                                                                  },
                                                                                },
                                                                                right: {
                                                                                  type: 'StringLiteral',
                                                                                  value: null,
                                                                                  raw: "'fg'",
                                                                                },
                                                                              },
                                                                              right: {
                                                                                type: 'StringLiteral',
                                                                                value: null,
                                                                                raw: "'bg'",
                                                                              },
                                                                            },
                                                                          ],
                                                                        },
                                                                        right: {
                                                                          type: 'StringLiteral',
                                                                          value: null,
                                                                          raw: "']restarting...'",
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                  {
                                                                    type: 'TableKeyString',
                                                                    key: { type: 'Identifier', name: 'font' },
                                                                    value: {
                                                                      type: 'Identifier',
                                                                      name: 'pixul_font',
                                                                    },
                                                                  },
                                                                  {
                                                                    type: 'TableKeyString',
                                                                    key: {
                                                                      type: 'Identifier',
                                                                      name: 'alignment',
                                                                    },
                                                                    value: {
                                                                      type: 'StringLiteral',
                                                                      value: null,
                                                                      raw: "'center'",
                                                                    },
                                                                  },
                                                                ],
                                                              },
                                                            },
                                                          ],
                                                        },
                                                        { type: 'Identifier', name: 'global_text_tags' },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'mouse_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 113, raw: '113' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 150, raw: '150' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'mouse control: '" },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'and',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'mouse_control' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                      },
                                      right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'mouse_control' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'UnaryExpression',
                                        operator: 'not',
                                        argument: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'mouse_control' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "'mouse control: '",
                                          },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'LogicalExpression',
                                                operator: 'or',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'and',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'mouse_control' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                                },
                                                right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'dark_transition_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '+',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 13, raw: '13' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 150, raw: '150' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'dark transitions: '" },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'and',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'dark_transitions' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                      },
                                      right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'dark_transitions' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'UnaryExpression',
                                        operator: 'not',
                                        argument: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'dark_transitions' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "'dark transitions: '",
                                          },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'LogicalExpression',
                                                operator: 'or',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'and',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'dark_transitions' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                                },
                                                right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'run_timer_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '+',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 121, raw: '121' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 150, raw: '150' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'run timer: '" },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'and',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'run_timer' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                      },
                                      right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'run_timer' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'UnaryExpression',
                                        operator: 'not',
                                        argument: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'run_timer' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: { type: 'StringLiteral', value: null, raw: "'run timer: '" },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'LogicalExpression',
                                                operator: 'or',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'and',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'run_timer' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                                },
                                                right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'sfx_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 46, raw: '46' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 175, raw: '175' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'sfx volume: '" },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '*',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'or',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'sfx_volume' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                      },
                                      right: { type: 'NumericLiteral', value: 10, raw: '10' },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch2' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'pull' },
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'spring' },
                                          base: { type: 'Identifier', name: 'b' },
                                        },
                                      },
                                      arguments: [
                                        { type: 'NumericLiteral', value: 0.2, raw: '0.2' },
                                        { type: 'NumericLiteral', value: 200, raw: '200' },
                                        { type: 'NumericLiteral', value: 10, raw: '10' },
                                      ],
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'selected' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                    ],
                                    init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'volume' },
                                        base: { type: 'Identifier', name: 'sfx' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'BinaryExpression',
                                        operator: '+',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'volume' },
                                          base: { type: 'Identifier', name: 'sfx' },
                                        },
                                        right: { type: 'NumericLiteral', value: 0.1, raw: '0.1' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'IfStatement',
                                    clauses: [
                                      {
                                        type: 'IfClause',
                                        condition: {
                                          type: 'BinaryExpression',
                                          operator: '>',
                                          left: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'volume' },
                                            base: { type: 'Identifier', name: 'sfx' },
                                          },
                                          right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                        },
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'volume' },
                                                base: { type: 'Identifier', name: 'sfx' },
                                              },
                                            ],
                                            init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'sfx_volume' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'volume' },
                                        base: { type: 'Identifier', name: 'sfx' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: { type: 'StringLiteral', value: null, raw: "'sfx volume: '" },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'BinaryExpression',
                                                operator: '*',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'or',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'sfx_volume' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                },
                                                right: { type: 'NumericLiteral', value: 10, raw: '10' },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action_2' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch2' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'pull' },
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'spring' },
                                          base: { type: 'Identifier', name: 'b' },
                                        },
                                      },
                                      arguments: [
                                        { type: 'NumericLiteral', value: 0.2, raw: '0.2' },
                                        { type: 'NumericLiteral', value: 200, raw: '200' },
                                        { type: 'NumericLiteral', value: 10, raw: '10' },
                                      ],
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'selected' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                    ],
                                    init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'volume' },
                                        base: { type: 'Identifier', name: 'sfx' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'volume' },
                                          base: { type: 'Identifier', name: 'sfx' },
                                        },
                                        right: { type: 'NumericLiteral', value: 0.1, raw: '0.1' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'IfStatement',
                                    clauses: [
                                      {
                                        type: 'IfClause',
                                        condition: {
                                          type: 'LogicalExpression',
                                          operator: 'and',
                                          left: {
                                            type: 'BinaryExpression',
                                            operator: '<',
                                            left: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'abs' },
                                                base: { type: 'Identifier', name: 'math' },
                                              },
                                              arguments: [
                                                {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'volume' },
                                                  base: { type: 'Identifier', name: 'sfx' },
                                                },
                                              ],
                                            },
                                            right: { type: 'NumericLiteral', value: 0.001, raw: '0.001' },
                                          },
                                          right: {
                                            type: 'BinaryExpression',
                                            operator: '>',
                                            left: {
                                              type: 'MemberExpression',
                                              indexer: '.',
                                              identifier: { type: 'Identifier', name: 'volume' },
                                              base: { type: 'Identifier', name: 'sfx' },
                                            },
                                            right: { type: 'NumericLiteral', value: 0, raw: '0' },
                                          },
                                        },
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'volume' },
                                                base: { type: 'Identifier', name: 'sfx' },
                                              },
                                            ],
                                            init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'IfStatement',
                                    clauses: [
                                      {
                                        type: 'IfClause',
                                        condition: {
                                          type: 'BinaryExpression',
                                          operator: '<',
                                          left: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'volume' },
                                            base: { type: 'Identifier', name: 'sfx' },
                                          },
                                          right: { type: 'NumericLiteral', value: 0, raw: '0' },
                                        },
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'volume' },
                                                base: { type: 'Identifier', name: 'sfx' },
                                              },
                                            ],
                                            init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'sfx_volume' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'volume' },
                                        base: { type: 'Identifier', name: 'sfx' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: { type: 'StringLiteral', value: null, raw: "'sfx volume: '" },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'BinaryExpression',
                                                operator: '*',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'or',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'sfx_volume' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                },
                                                right: { type: 'NumericLiteral', value: 10, raw: '10' },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'music_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '+',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 48, raw: '48' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 175, raw: '175' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'music volume: '" },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'BinaryExpression',
                                      operator: '*',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'or',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'music_volume' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                      },
                                      right: { type: 'NumericLiteral', value: 10, raw: '10' },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch2' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'pull' },
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'spring' },
                                          base: { type: 'Identifier', name: 'b' },
                                        },
                                      },
                                      arguments: [
                                        { type: 'NumericLiteral', value: 0.2, raw: '0.2' },
                                        { type: 'NumericLiteral', value: 200, raw: '200' },
                                        { type: 'NumericLiteral', value: 10, raw: '10' },
                                      ],
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'selected' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                    ],
                                    init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'volume' },
                                        base: { type: 'Identifier', name: 'music' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'BinaryExpression',
                                        operator: '+',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'volume' },
                                          base: { type: 'Identifier', name: 'music' },
                                        },
                                        right: { type: 'NumericLiteral', value: 0.1, raw: '0.1' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'IfStatement',
                                    clauses: [
                                      {
                                        type: 'IfClause',
                                        condition: {
                                          type: 'BinaryExpression',
                                          operator: '>',
                                          left: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'volume' },
                                            base: { type: 'Identifier', name: 'music' },
                                          },
                                          right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                        },
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'volume' },
                                                base: { type: 'Identifier', name: 'music' },
                                              },
                                            ],
                                            init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'music_volume' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'volume' },
                                        base: { type: 'Identifier', name: 'music' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: { type: 'StringLiteral', value: null, raw: "'music volume: '" },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'BinaryExpression',
                                                operator: '*',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'or',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'music_volume' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                },
                                                right: { type: 'NumericLiteral', value: 10, raw: '10' },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action_2' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch2' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'pull' },
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'spring' },
                                          base: { type: 'Identifier', name: 'b' },
                                        },
                                      },
                                      arguments: [
                                        { type: 'NumericLiteral', value: 0.2, raw: '0.2' },
                                        { type: 'NumericLiteral', value: 200, raw: '200' },
                                        { type: 'NumericLiteral', value: 10, raw: '10' },
                                      ],
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'selected' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                    ],
                                    init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'volume' },
                                        base: { type: 'Identifier', name: 'music' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'volume' },
                                          base: { type: 'Identifier', name: 'music' },
                                        },
                                        right: { type: 'NumericLiteral', value: 0.1, raw: '0.1' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'IfStatement',
                                    clauses: [
                                      {
                                        type: 'IfClause',
                                        condition: {
                                          type: 'LogicalExpression',
                                          operator: 'and',
                                          left: {
                                            type: 'BinaryExpression',
                                            operator: '<',
                                            left: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'abs' },
                                                base: { type: 'Identifier', name: 'math' },
                                              },
                                              arguments: [
                                                {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'volume' },
                                                  base: { type: 'Identifier', name: 'music' },
                                                },
                                              ],
                                            },
                                            right: { type: 'NumericLiteral', value: 0.001, raw: '0.001' },
                                          },
                                          right: {
                                            type: 'BinaryExpression',
                                            operator: '>',
                                            left: {
                                              type: 'MemberExpression',
                                              indexer: '.',
                                              identifier: { type: 'Identifier', name: 'volume' },
                                              base: { type: 'Identifier', name: 'music' },
                                            },
                                            right: { type: 'NumericLiteral', value: 0, raw: '0' },
                                          },
                                        },
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'volume' },
                                                base: { type: 'Identifier', name: 'music' },
                                              },
                                            ],
                                            init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'IfStatement',
                                    clauses: [
                                      {
                                        type: 'IfClause',
                                        condition: {
                                          type: 'BinaryExpression',
                                          operator: '<',
                                          left: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'volume' },
                                            base: { type: 'Identifier', name: 'music' },
                                          },
                                          right: { type: 'NumericLiteral', value: 0, raw: '0' },
                                        },
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'volume' },
                                                base: { type: 'Identifier', name: 'music' },
                                              },
                                            ],
                                            init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'music_volume' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'volume' },
                                        base: { type: 'Identifier', name: 'music' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: { type: 'StringLiteral', value: null, raw: "'music volume: '" },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'BinaryExpression',
                                                operator: '*',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'or',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'music_volume' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                },
                                                right: { type: 'NumericLiteral', value: 10, raw: '10' },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'video_button_1' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 136, raw: '136' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 125, raw: '125' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: { type: 'StringLiteral', value: null, raw: "'window size-'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [],
                                body: [
                                  {
                                    type: 'IfStatement',
                                    clauses: [
                                      {
                                        type: 'IfClause',
                                        condition: {
                                          type: 'LogicalExpression',
                                          operator: 'and',
                                          left: {
                                            type: 'BinaryExpression',
                                            operator: '>',
                                            left: { type: 'Identifier', name: 'sx' },
                                            right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                          },
                                          right: {
                                            type: 'BinaryExpression',
                                            operator: '>',
                                            left: { type: 'Identifier', name: 'sy' },
                                            right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                          },
                                        },
                                        body: [
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_switch1' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              { type: 'Identifier', name: 'sx' },
                                              { type: 'Identifier', name: 'sy' },
                                            ],
                                            init: [
                                              {
                                                type: 'BinaryExpression',
                                                operator: '-',
                                                left: { type: 'Identifier', name: 'sx' },
                                                right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                              },
                                              {
                                                type: 'BinaryExpression',
                                                operator: '-',
                                                left: { type: 'Identifier', name: 'sy' },
                                                right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                              },
                                            ],
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'setMode' },
                                                base: {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'window' },
                                                  base: { type: 'Identifier', name: 'love' },
                                                },
                                              },
                                              arguments: [
                                                {
                                                  type: 'BinaryExpression',
                                                  operator: '*',
                                                  left: { type: 'NumericLiteral', value: 480, raw: '480' },
                                                  right: { type: 'Identifier', name: 'sx' },
                                                },
                                                {
                                                  type: 'BinaryExpression',
                                                  operator: '*',
                                                  left: { type: 'NumericLiteral', value: 270, raw: '270' },
                                                  right: { type: 'Identifier', name: 'sy' },
                                                },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'sx' },
                                                base: { type: 'Identifier', name: 'state' },
                                              },
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'sy' },
                                                base: { type: 'Identifier', name: 'state' },
                                              },
                                            ],
                                            init: [
                                              { type: 'Identifier', name: 'sx' },
                                              { type: 'Identifier', name: 'sy' },
                                            ],
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'fullscreen' },
                                                base: { type: 'Identifier', name: 'state' },
                                              },
                                            ],
                                            init: [{ type: 'BooleanLiteral', value: false, raw: 'false' }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'video_button_2' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 50, raw: '50' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 125, raw: '125' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: { type: 'StringLiteral', value: null, raw: "'window size+'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      { type: 'Identifier', name: 'sx' },
                                      { type: 'Identifier', name: 'sy' },
                                    ],
                                    init: [
                                      {
                                        type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Identifier', name: 'sx' },
                                        right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                      },
                                      {
                                        type: 'BinaryExpression',
                                        operator: '+',
                                        left: { type: 'Identifier', name: 'sy' },
                                        right: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'setMode' },
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'window' },
                                          base: { type: 'Identifier', name: 'love' },
                                        },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '*',
                                          left: { type: 'NumericLiteral', value: 480, raw: '480' },
                                          right: { type: 'Identifier', name: 'sx' },
                                        },
                                        {
                                          type: 'BinaryExpression',
                                          operator: '*',
                                          left: { type: 'NumericLiteral', value: 270, raw: '270' },
                                          right: { type: 'Identifier', name: 'sy' },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'sx' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'sy' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      { type: 'Identifier', name: 'sx' },
                                      { type: 'Identifier', name: 'sy' },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'fullscreen' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [{ type: 'BooleanLiteral', value: false, raw: 'false' }],
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'video_button_3' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '+',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 29, raw: '29' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 125, raw: '125' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: { type: 'StringLiteral', value: null, raw: "'fullscreen'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'LocalStatement',
                                    variables: [
                                      { type: 'Identifier', name: '_' },
                                      { type: 'Identifier', name: '_' },
                                      { type: 'Identifier', name: 'flags' },
                                    ],
                                    init: [
                                      {
                                        type: 'CallExpression',
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'getMode' },
                                          base: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'window' },
                                            base: { type: 'Identifier', name: 'love' },
                                          },
                                        },
                                        arguments: [],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'LocalStatement',
                                    variables: [
                                      { type: 'Identifier', name: 'window_width' },
                                      { type: 'Identifier', name: 'window_height' },
                                    ],
                                    init: [
                                      {
                                        type: 'CallExpression',
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'getDesktopDimensions' },
                                          base: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'window' },
                                            base: { type: 'Identifier', name: 'love' },
                                          },
                                        },
                                        arguments: [
                                          {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'display' },
                                            base: { type: 'Identifier', name: 'flags' },
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      { type: 'Identifier', name: 'sx' },
                                      { type: 'Identifier', name: 'sy' },
                                    ],
                                    init: [
                                      {
                                        type: 'BinaryExpression',
                                        operator: '/',
                                        left: { type: 'Identifier', name: 'window_width' },
                                        right: { type: 'NumericLiteral', value: 480, raw: '480' },
                                      },
                                      {
                                        type: 'BinaryExpression',
                                        operator: '/',
                                        left: { type: 'Identifier', name: 'window_height' },
                                        right: { type: 'NumericLiteral', value: 270, raw: '270' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'sx' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'sy' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      { type: 'Identifier', name: 'sx' },
                                      { type: 'Identifier', name: 'sy' },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      { type: 'Identifier', name: 'ww' },
                                      { type: 'Identifier', name: 'wh' },
                                    ],
                                    init: [
                                      { type: 'Identifier', name: 'window_width' },
                                      { type: 'Identifier', name: 'window_height' },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'setMode' },
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'window' },
                                          base: { type: 'Identifier', name: 'love' },
                                        },
                                      },
                                      arguments: [
                                        { type: 'Identifier', name: 'window_width' },
                                        { type: 'Identifier', name: 'window_height' },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'video_button_4' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '+',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 129, raw: '129' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 125, raw: '125' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: { type: 'StringLiteral', value: null, raw: "'reset video settings'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [],
                                body: [
                                  {
                                    type: 'LocalStatement',
                                    variables: [
                                      { type: 'Identifier', name: '_' },
                                      { type: 'Identifier', name: '_' },
                                      { type: 'Identifier', name: 'flags' },
                                    ],
                                    init: [
                                      {
                                        type: 'CallExpression',
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'getMode' },
                                          base: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'window' },
                                            base: { type: 'Identifier', name: 'love' },
                                          },
                                        },
                                        arguments: [],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'LocalStatement',
                                    variables: [
                                      { type: 'Identifier', name: 'window_width' },
                                      { type: 'Identifier', name: 'window_height' },
                                    ],
                                    init: [
                                      {
                                        type: 'CallExpression',
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'getDesktopDimensions' },
                                          base: {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'window' },
                                            base: { type: 'Identifier', name: 'love' },
                                          },
                                        },
                                        arguments: [
                                          {
                                            type: 'MemberExpression',
                                            indexer: '.',
                                            identifier: { type: 'Identifier', name: 'display' },
                                            base: { type: 'Identifier', name: 'flags' },
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      { type: 'Identifier', name: 'sx' },
                                      { type: 'Identifier', name: 'sy' },
                                    ],
                                    init: [
                                      {
                                        type: 'BinaryExpression',
                                        operator: '/',
                                        left: { type: 'Identifier', name: 'window_width' },
                                        right: { type: 'NumericLiteral', value: 480, raw: '480' },
                                      },
                                      {
                                        type: 'BinaryExpression',
                                        operator: '/',
                                        left: { type: 'Identifier', name: 'window_height' },
                                        right: { type: 'NumericLiteral', value: 270, raw: '270' },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      { type: 'Identifier', name: 'ww' },
                                      { type: 'Identifier', name: 'wh' },
                                    ],
                                    init: [
                                      { type: 'Identifier', name: 'window_width' },
                                      { type: 'Identifier', name: 'window_height' },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'sx' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'sy' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      { type: 'Identifier', name: 'sx' },
                                      { type: 'Identifier', name: 'sy' },
                                    ],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'fullscreen' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [{ type: 'BooleanLiteral', value: false, raw: 'false' }],
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      { type: 'Identifier', name: 'ww' },
                                      { type: 'Identifier', name: 'wh' },
                                    ],
                                    init: [
                                      { type: 'Identifier', name: 'window_width' },
                                      { type: 'Identifier', name: 'window_height' },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'setMode' },
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'window' },
                                          base: { type: 'Identifier', name: 'love' },
                                        },
                                      },
                                      arguments: [
                                        { type: 'Identifier', name: 'window_width' },
                                        { type: 'Identifier', name: 'window_height' },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'screen_shake_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 57, raw: '57' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 100, raw: '100' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'w' },
                              value: { type: 'NumericLiteral', value: 110, raw: '110' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'[bg10]screen shake: '" },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'and',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'no_screen_shake' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                      },
                                      right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'no_screen_shake' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'UnaryExpression',
                                        operator: 'not',
                                        argument: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'no_screen_shake' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: { type: 'StringLiteral', value: null, raw: "'screen shake: '" },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'LogicalExpression',
                                                operator: 'or',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'and',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'no_screen_shake' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                                },
                                                right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'cooldown_snake_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '+',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 75, raw: '75' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 100, raw: '100' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'w' },
                              value: { type: 'NumericLiteral', value: 145, raw: '145' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: {
                                  type: 'StringLiteral',
                                  value: null,
                                  raw: "'[bg10]cooldowns on snake: '",
                                },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'and',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'cooldown_snake' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                      },
                                      right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'cooldown_snake' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'UnaryExpression',
                                        operator: 'not',
                                        argument: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'cooldown_snake' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "'cooldowns on snake: '",
                                          },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'LogicalExpression',
                                                operator: 'or',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'and',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'cooldown_snake' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                                },
                                                right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'arrow_snake_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '+',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 65, raw: '65' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 75, raw: '75' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'w' },
                              value: { type: 'NumericLiteral', value: 125, raw: '125' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'[bg10]arrow on snake: '" },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'and',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'arrow_snake' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                      },
                                      right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'arrow_snake' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'UnaryExpression',
                                        operator: 'not',
                                        argument: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'arrow_snake' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "'arrow on snake: '",
                                          },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'LogicalExpression',
                                                operator: 'or',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'and',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'arrow_snake' },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                                },
                                                right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'screen_movement_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: {
                                  type: 'BinaryExpression',
                                  operator: '/',
                                  left: { type: 'Identifier', name: 'gw' },
                                  right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                },
                                right: { type: 'NumericLiteral', value: 69, raw: '69' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 75, raw: '75' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'w' },
                              value: { type: 'NumericLiteral', value: 135, raw: '135' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '..',
                                left: { type: 'StringLiteral', value: null, raw: "'[bg10]screen movement: '" },
                                right: {
                                  type: 'CallExpression',
                                  base: { type: 'Identifier', name: 'tostring' },
                                  arguments: [
                                    {
                                      type: 'LogicalExpression',
                                      operator: 'or',
                                      left: {
                                        type: 'LogicalExpression',
                                        operator: 'and',
                                        left: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'no_screen_movement' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                      },
                                      right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                    },
                                  ],
                                },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [{ type: 'Identifier', name: 'b' }],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'TableCallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'play' },
                                        base: { type: 'Identifier', name: 'ui_switch1' },
                                      },
                                      arguments: {
                                        type: 'TableConstructorExpression',
                                        fields: [
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'pitch' },
                                            value: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'float' },
                                                base: { type: 'Identifier', name: 'random' },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'TableKeyString',
                                            key: { type: 'Identifier', name: 'volume' },
                                            value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                          },
                                        ],
                                      },
                                    },
                                  },
                                  {
                                    type: 'AssignmentStatement',
                                    variables: [
                                      {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'no_screen_movement' },
                                        base: { type: 'Identifier', name: 'state' },
                                      },
                                    ],
                                    init: [
                                      {
                                        type: 'UnaryExpression',
                                        operator: 'not',
                                        argument: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'no_screen_movement' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                      },
                                    ],
                                  },
                                  {
                                    type: 'IfStatement',
                                    clauses: [
                                      {
                                        type: 'IfClause',
                                        condition: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'no_screen_movement' },
                                          base: { type: 'Identifier', name: 'state' },
                                        },
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'x' },
                                                base: { type: 'Identifier', name: 'camera' },
                                              },
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'y' },
                                                base: { type: 'Identifier', name: 'camera' },
                                              },
                                            ],
                                            init: [
                                              {
                                                type: 'BinaryExpression',
                                                operator: '/',
                                                left: { type: 'Identifier', name: 'gw' },
                                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                              },
                                              {
                                                type: 'BinaryExpression',
                                                operator: '/',
                                                left: { type: 'Identifier', name: 'gh' },
                                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                              },
                                            ],
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'r' },
                                                base: { type: 'Identifier', name: 'camera' },
                                              },
                                            ],
                                            init: [{ type: 'NumericLiteral', value: 0, raw: '0' }],
                                          },
                                        ],
                                      },
                                    ],
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: ':',
                                        identifier: { type: 'Identifier', name: 'set_text' },
                                        base: { type: 'Identifier', name: 'b' },
                                      },
                                      arguments: [
                                        {
                                          type: 'BinaryExpression',
                                          operator: '..',
                                          left: {
                                            type: 'StringLiteral',
                                            value: null,
                                            raw: "'screen movement: '",
                                          },
                                          right: {
                                            type: 'CallExpression',
                                            base: { type: 'Identifier', name: 'tostring' },
                                            arguments: [
                                              {
                                                type: 'LogicalExpression',
                                                operator: 'or',
                                                left: {
                                                  type: 'LogicalExpression',
                                                  operator: 'and',
                                                  left: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: {
                                                      type: 'Identifier',
                                                      name: 'no_screen_movement',
                                                    },
                                                    base: { type: 'Identifier', name: 'state' },
                                                  },
                                                  right: { type: 'StringLiteral', value: null, raw: "'no'" },
                                                },
                                                right: { type: 'StringLiteral', value: null, raw: "'yes'" },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'CallExpression',
                          base: {
                            type: 'MemberExpression',
                            indexer: ':',
                            identifier: { type: 'Identifier', name: 'is' },
                            base: { type: 'Identifier', name: 'self' },
                          },
                          arguments: [{ type: 'Identifier', name: 'MainMenu' }],
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ng_plus_minus_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [
                              {
                                type: 'TableCallExpression',
                                base: { type: 'Identifier', name: 'Button' },
                                arguments: {
                                  type: 'TableConstructorExpression',
                                  fields: [
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'group' },
                                      value: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'ui' },
                                        base: { type: 'Identifier', name: 'self' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'x' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: {
                                          type: 'BinaryExpression',
                                          operator: '/',
                                          left: { type: 'Identifier', name: 'gw' },
                                          right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                        },
                                        right: { type: 'NumericLiteral', value: 58, raw: '58' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'y' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: { type: 'Identifier', name: 'gh' },
                                        right: { type: 'NumericLiteral', value: 50, raw: '50' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'force_update' },
                                      value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'button_text' },
                                      value: { type: 'StringLiteral', value: null, raw: "'NG+ down'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'fg_color' },
                                      value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'bg_color' },
                                      value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'action' },
                                      value: {
                                        type: 'FunctionDeclaration',
                                        identifier: null,
                                        isLocal: false,
                                        parameters: [{ type: 'Identifier', name: 'b' }],
                                        body: [
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_switch1' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'pull' },
                                                base: {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'spring' },
                                                  base: { type: 'Identifier', name: 'b' },
                                                },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.2, raw: '0.2' },
                                                { type: 'NumericLiteral', value: 200, raw: '200' },
                                                { type: 'NumericLiteral', value: 10, raw: '10' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'selected' },
                                                base: { type: 'Identifier', name: 'b' },
                                              },
                                            ],
                                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [{ type: 'Identifier', name: 'current_new_game_plus' }],
                                            init: [
                                              {
                                                type: 'CallExpression',
                                                base: {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'clamp' },
                                                  base: { type: 'Identifier', name: 'math' },
                                                },
                                                arguments: [
                                                  {
                                                    type: 'BinaryExpression',
                                                    operator: '-',
                                                    left: { type: 'Identifier', name: 'current_new_game_plus' },
                                                    right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                                  },
                                                  { type: 'NumericLiteral', value: 0, raw: '0' },
                                                  { type: 'NumericLiteral', value: 5, raw: '5' },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'current_new_game_plus' },
                                                base: { type: 'Identifier', name: 'state' },
                                              },
                                            ],
                                            init: [{ type: 'Identifier', name: 'current_new_game_plus' }],
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'set_text' },
                                                base: {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'text' },
                                                  base: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'ng_t' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                },
                                              },
                                              arguments: [
                                                {
                                                  type: 'TableConstructorExpression',
                                                  fields: [
                                                    {
                                                      type: 'TableValue',
                                                      value: {
                                                        type: 'TableConstructorExpression',
                                                        fields: [
                                                          {
                                                            type: 'TableKeyString',
                                                            key: { type: 'Identifier', name: 'text' },
                                                            value: {
                                                              type: 'BinaryExpression',
                                                              operator: '..',
                                                              left: {
                                                                type: 'StringLiteral',
                                                                value: null,
                                                                raw: "'[bg10]current: '",
                                                              },
                                                              right: {
                                                                type: 'Identifier',
                                                                name: 'current_new_game_plus',
                                                              },
                                                            },
                                                          },
                                                          {
                                                            type: 'TableKeyString',
                                                            key: { type: 'Identifier', name: 'font' },
                                                            value: { type: 'Identifier', name: 'pixul_font' },
                                                          },
                                                          {
                                                            type: 'TableKeyString',
                                                            key: { type: 'Identifier', name: 'alignment' },
                                                            value: {
                                                              type: 'StringLiteral',
                                                              value: null,
                                                              raw: "'center'",
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [{ type: 'Identifier', name: 'max_units' }],
                                            init: [
                                              {
                                                type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'NumericLiteral', value: 7, raw: '7' },
                                                right: { type: 'Identifier', name: 'current_new_game_plus' },
                                              },
                                            ],
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'save_run' },
                                                base: { type: 'Identifier', name: 'system' },
                                              },
                                              arguments: [],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ng_plus_plus_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [
                              {
                                type: 'TableCallExpression',
                                base: { type: 'Identifier', name: 'Button' },
                                arguments: {
                                  type: 'TableConstructorExpression',
                                  fields: [
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'group' },
                                      value: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'ui' },
                                        base: { type: 'Identifier', name: 'self' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'x' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '+',
                                        left: {
                                          type: 'BinaryExpression',
                                          operator: '/',
                                          left: { type: 'Identifier', name: 'gw' },
                                          right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                        },
                                        right: { type: 'NumericLiteral', value: 5, raw: '5' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'y' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: { type: 'Identifier', name: 'gh' },
                                        right: { type: 'NumericLiteral', value: 50, raw: '50' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'force_update' },
                                      value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'button_text' },
                                      value: { type: 'StringLiteral', value: null, raw: "'NG+ up'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'fg_color' },
                                      value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'bg_color' },
                                      value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'action' },
                                      value: {
                                        type: 'FunctionDeclaration',
                                        identifier: null,
                                        isLocal: false,
                                        parameters: [{ type: 'Identifier', name: 'b' }],
                                        body: [
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_switch1' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'pull' },
                                                base: {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'spring' },
                                                  base: { type: 'Identifier', name: 'b' },
                                                },
                                              },
                                              arguments: [
                                                { type: 'NumericLiteral', value: 0.2, raw: '0.2' },
                                                { type: 'NumericLiteral', value: 200, raw: '200' },
                                                { type: 'NumericLiteral', value: 10, raw: '10' },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'selected' },
                                                base: { type: 'Identifier', name: 'b' },
                                              },
                                            ],
                                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [{ type: 'Identifier', name: 'current_new_game_plus' }],
                                            init: [
                                              {
                                                type: 'CallExpression',
                                                base: {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'clamp' },
                                                  base: { type: 'Identifier', name: 'math' },
                                                },
                                                arguments: [
                                                  {
                                                    type: 'BinaryExpression',
                                                    operator: '+',
                                                    left: { type: 'Identifier', name: 'current_new_game_plus' },
                                                    right: { type: 'NumericLiteral', value: 1, raw: '1' },
                                                  },
                                                  { type: 'NumericLiteral', value: 0, raw: '0' },
                                                  { type: 'Identifier', name: 'new_game_plus' },
                                                ],
                                              },
                                            ],
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'current_new_game_plus' },
                                                base: { type: 'Identifier', name: 'state' },
                                              },
                                            ],
                                            init: [{ type: 'Identifier', name: 'current_new_game_plus' }],
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'set_text' },
                                                base: {
                                                  type: 'MemberExpression',
                                                  indexer: '.',
                                                  identifier: { type: 'Identifier', name: 'text' },
                                                  base: {
                                                    type: 'MemberExpression',
                                                    indexer: '.',
                                                    identifier: { type: 'Identifier', name: 'ng_t' },
                                                    base: { type: 'Identifier', name: 'self' },
                                                  },
                                                },
                                              },
                                              arguments: [
                                                {
                                                  type: 'TableConstructorExpression',
                                                  fields: [
                                                    {
                                                      type: 'TableValue',
                                                      value: {
                                                        type: 'TableConstructorExpression',
                                                        fields: [
                                                          {
                                                            type: 'TableKeyString',
                                                            key: { type: 'Identifier', name: 'text' },
                                                            value: {
                                                              type: 'BinaryExpression',
                                                              operator: '..',
                                                              left: {
                                                                type: 'StringLiteral',
                                                                value: null,
                                                                raw: "'[bg10]current: '",
                                                              },
                                                              right: {
                                                                type: 'Identifier',
                                                                name: 'current_new_game_plus',
                                                              },
                                                            },
                                                          },
                                                          {
                                                            type: 'TableKeyString',
                                                            key: { type: 'Identifier', name: 'font' },
                                                            value: { type: 'Identifier', name: 'pixul_font' },
                                                          },
                                                          {
                                                            type: 'TableKeyString',
                                                            key: { type: 'Identifier', name: 'alignment' },
                                                            value: {
                                                              type: 'StringLiteral',
                                                              value: null,
                                                              raw: "'center'",
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                          },
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [{ type: 'Identifier', name: 'max_units' }],
                                            init: [
                                              {
                                                type: 'BinaryExpression',
                                                operator: '+',
                                                left: { type: 'NumericLiteral', value: 7, raw: '7' },
                                                right: { type: 'Identifier', name: 'current_new_game_plus' },
                                              },
                                            ],
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'CallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'save_run' },
                                                base: { type: 'Identifier', name: 'system' },
                                              },
                                              arguments: [],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'UnaryExpression',
                          operator: 'not',
                          argument: {
                            type: 'CallExpression',
                            base: {
                              type: 'MemberExpression',
                              indexer: ':',
                              identifier: { type: 'Identifier', name: 'is' },
                              base: { type: 'Identifier', name: 'self' },
                            },
                            arguments: [{ type: 'Identifier', name: 'MainMenu' }],
                          },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'main_menu_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [
                              {
                                type: 'TableCallExpression',
                                base: { type: 'Identifier', name: 'Button' },
                                arguments: {
                                  type: 'TableConstructorExpression',
                                  fields: [
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'group' },
                                      value: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'ui' },
                                        base: { type: 'Identifier', name: 'self' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'x' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '/',
                                        left: { type: 'Identifier', name: 'gw' },
                                        right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'y' },
                                      value: {
                                        type: 'BinaryExpression',
                                        operator: '-',
                                        left: { type: 'Identifier', name: 'gh' },
                                        right: { type: 'NumericLiteral', value: 50, raw: '50' },
                                      },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'force_update' },
                                      value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'button_text' },
                                      value: { type: 'StringLiteral', value: null, raw: "'main menu'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'fg_color' },
                                      value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'bg_color' },
                                      value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                                    },
                                    {
                                      type: 'TableKeyString',
                                      key: { type: 'Identifier', name: 'action' },
                                      value: {
                                        type: 'FunctionDeclaration',
                                        identifier: null,
                                        isLocal: false,
                                        parameters: [{ type: 'Identifier', name: 'b' }],
                                        body: [
                                          {
                                            type: 'AssignmentStatement',
                                            variables: [
                                              {
                                                type: 'MemberExpression',
                                                indexer: '.',
                                                identifier: { type: 'Identifier', name: 'transitioning' },
                                                base: { type: 'Identifier', name: 'self' },
                                              },
                                            ],
                                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_transition2' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_switch2' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: {
                                                type: 'MemberExpression',
                                                indexer: ':',
                                                identifier: { type: 'Identifier', name: 'play' },
                                                base: { type: 'Identifier', name: 'ui_switch1' },
                                              },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'pitch' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: {
                                                        type: 'MemberExpression',
                                                        indexer: ':',
                                                        identifier: { type: 'Identifier', name: 'float' },
                                                        base: { type: 'Identifier', name: 'random' },
                                                      },
                                                      arguments: [
                                                        { type: 'NumericLiteral', value: 0.95, raw: '0.95' },
                                                        { type: 'NumericLiteral', value: 1.05, raw: '1.05' },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'volume' },
                                                    value: { type: 'NumericLiteral', value: 0.5, raw: '0.5' },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                          {
                                            type: 'CallStatement',
                                            expression: {
                                              type: 'TableCallExpression',
                                              base: { type: 'Identifier', name: 'TransitionEffect' },
                                              arguments: {
                                                type: 'TableConstructorExpression',
                                                fields: [
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'group' },
                                                    value: {
                                                      type: 'MemberExpression',
                                                      indexer: '.',
                                                      identifier: { type: 'Identifier', name: 'transitions' },
                                                      base: { type: 'Identifier', name: 'main' },
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'x' },
                                                    value: {
                                                      type: 'BinaryExpression',
                                                      operator: '/',
                                                      left: { type: 'Identifier', name: 'gw' },
                                                      right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'y' },
                                                    value: {
                                                      type: 'BinaryExpression',
                                                      operator: '/',
                                                      left: { type: 'Identifier', name: 'gh' },
                                                      right: { type: 'NumericLiteral', value: 2, raw: '2' },
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'color' },
                                                    value: {
                                                      type: 'LogicalExpression',
                                                      operator: 'or',
                                                      left: {
                                                        type: 'LogicalExpression',
                                                        operator: 'and',
                                                        left: {
                                                          type: 'MemberExpression',
                                                          indexer: '.',
                                                          identifier: {
                                                            type: 'Identifier',
                                                            name: 'dark_transitions',
                                                          },
                                                          base: { type: 'Identifier', name: 'state' },
                                                        },
                                                        right: {
                                                          type: 'IndexExpression',
                                                          base: { type: 'Identifier', name: 'bg' },
                                                          index: {
                                                            type: 'UnaryExpression',
                                                            operator: '-',
                                                            argument: {
                                                              type: 'NumericLiteral',
                                                              value: 2,
                                                              raw: '2',
                                                            },
                                                          },
                                                        },
                                                      },
                                                      right: {
                                                        type: 'IndexExpression',
                                                        base: { type: 'Identifier', name: 'fg' },
                                                        index: { type: 'NumericLiteral', value: 0, raw: '0' },
                                                      },
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'transition_action' },
                                                    value: {
                                                      type: 'FunctionDeclaration',
                                                      identifier: null,
                                                      isLocal: false,
                                                      parameters: [],
                                                      body: [
                                                        {
                                                          type: 'CallStatement',
                                                          expression: {
                                                            type: 'CallExpression',
                                                            base: {
                                                              type: 'MemberExpression',
                                                              indexer: ':',
                                                              identifier: { type: 'Identifier', name: 'add' },
                                                              base: { type: 'Identifier', name: 'main' },
                                                            },
                                                            arguments: [
                                                              {
                                                                type: 'StringCallExpression',
                                                                base: { type: 'Identifier', name: 'MainMenu' },
                                                                argument: {
                                                                  type: 'StringLiteral',
                                                                  value: null,
                                                                  raw: "'main_menu'",
                                                                },
                                                              },
                                                            ],
                                                          },
                                                        },
                                                        {
                                                          type: 'CallStatement',
                                                          expression: {
                                                            type: 'CallExpression',
                                                            base: {
                                                              type: 'MemberExpression',
                                                              indexer: ':',
                                                              identifier: { type: 'Identifier', name: 'go_to' },
                                                              base: { type: 'Identifier', name: 'main' },
                                                            },
                                                            arguments: [
                                                              {
                                                                type: 'StringLiteral',
                                                                value: null,
                                                                raw: "'main_menu'",
                                                              },
                                                            ],
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    type: 'TableKeyString',
                                                    key: { type: 'Identifier', name: 'text' },
                                                    value: {
                                                      type: 'CallExpression',
                                                      base: { type: 'Identifier', name: 'Text' },
                                                      arguments: [
                                                        {
                                                          type: 'TableConstructorExpression',
                                                          fields: [
                                                            {
                                                              type: 'TableValue',
                                                              value: {
                                                                type: 'TableConstructorExpression',
                                                                fields: [
                                                                  {
                                                                    type: 'TableKeyString',
                                                                    key: { type: 'Identifier', name: 'text' },
                                                                    value: {
                                                                      type: 'BinaryExpression',
                                                                      operator: '..',
                                                                      left: {
                                                                        type: 'StringLiteral',
                                                                        value: null,
                                                                        raw: "'[wavy, '",
                                                                      },
                                                                      right: {
                                                                        type: 'BinaryExpression',
                                                                        operator: '..',
                                                                        left: {
                                                                          type: 'CallExpression',
                                                                          base: {
                                                                            type: 'Identifier',
                                                                            name: 'tostring',
                                                                          },
                                                                          arguments: [
                                                                            {
                                                                              type: 'LogicalExpression',
                                                                              operator: 'or',
                                                                              left: {
                                                                                type: 'LogicalExpression',
                                                                                operator: 'and',
                                                                                left: {
                                                                                  type: 'MemberExpression',
                                                                                  indexer: '.',
                                                                                  identifier: {
                                                                                    type: 'Identifier',
                                                                                    name: 'dark_transitions',
                                                                                  },
                                                                                  base: {
                                                                                    type: 'Identifier',
                                                                                    name: 'state',
                                                                                  },
                                                                                },
                                                                                right: {
                                                                                  type: 'StringLiteral',
                                                                                  value: null,
                                                                                  raw: "'fg'",
                                                                                },
                                                                              },
                                                                              right: {
                                                                                type: 'StringLiteral',
                                                                                value: null,
                                                                                raw: "'bg'",
                                                                              },
                                                                            },
                                                                          ],
                                                                        },
                                                                        right: {
                                                                          type: 'StringLiteral',
                                                                          value: null,
                                                                          raw: "']..'",
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                  {
                                                                    type: 'TableKeyString',
                                                                    key: { type: 'Identifier', name: 'font' },
                                                                    value: {
                                                                      type: 'Identifier',
                                                                      name: 'pixul_font',
                                                                    },
                                                                  },
                                                                  {
                                                                    type: 'TableKeyString',
                                                                    key: {
                                                                      type: 'Identifier',
                                                                      name: 'alignment',
                                                                    },
                                                                    value: {
                                                                      type: 'StringLiteral',
                                                                      value: null,
                                                                      raw: "'center'",
                                                                    },
                                                                  },
                                                                ],
                                                              },
                                                            },
                                                          ],
                                                        },
                                                        { type: 'Identifier', name: 'global_text_tags' },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'quit_button' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [
                      {
                        type: 'TableCallExpression',
                        base: { type: 'Identifier', name: 'Button' },
                        arguments: {
                          type: 'TableConstructorExpression',
                          fields: [
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'group' },
                              value: {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ui' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'x' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '/',
                                left: { type: 'Identifier', name: 'gw' },
                                right: { type: 'NumericLiteral', value: 2, raw: '2' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'y' },
                              value: {
                                type: 'BinaryExpression',
                                operator: '-',
                                left: { type: 'Identifier', name: 'gh' },
                                right: { type: 'NumericLiteral', value: 25, raw: '25' },
                              },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'force_update' },
                              value: { type: 'BooleanLiteral', value: true, raw: 'true' },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'button_text' },
                              value: { type: 'StringLiteral', value: null, raw: "'quit'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'fg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg10'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'bg_color' },
                              value: { type: 'StringLiteral', value: null, raw: "'bg'" },
                            },
                            {
                              type: 'TableKeyString',
                              key: { type: 'Identifier', name: 'action' },
                              value: {
                                type: 'FunctionDeclaration',
                                identifier: null,
                                isLocal: false,
                                parameters: [],
                                body: [
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'save_state' },
                                        base: { type: 'Identifier', name: 'system' },
                                      },
                                      arguments: [],
                                    },
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'shutdown' },
                                        base: { type: 'Identifier', name: 'steam' },
                                      },
                                      arguments: [],
                                    },
                                  },
                                  {
                                    type: 'CallStatement',
                                    expression: {
                                      type: 'CallExpression',
                                      base: {
                                        type: 'MemberExpression',
                                        indexer: '.',
                                        identifier: { type: 'Identifier', name: 'quit' },
                                        base: {
                                          type: 'MemberExpression',
                                          indexer: '.',
                                          identifier: { type: 'Identifier', name: 'event' },
                                          base: { type: 'Identifier', name: 'love' },
                                        },
                                      },
                                      arguments: [],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                ],
              },
              { type: 'StringLiteral', value: null, raw: "'pause'" },
            ],
          },
        },
      ],
    },
    {
      type: 'FunctionDeclaration',
      identifier: { type: 'Identifier', name: 'close_options' },
      isLocal: false,
      parameters: [{ type: 'Identifier', name: 'self' }],
      body: [
        {
          type: 'CallStatement',
          expression: {
            type: 'CallExpression',
            base: {
              type: 'MemberExpression',
              indexer: ':',
              identifier: { type: 'Identifier', name: 'tween' },
              base: { type: 'Identifier', name: 'trigger' },
            },
            arguments: [
              { type: 'NumericLiteral', value: 0.25, raw: '0.25' },
              { type: 'Identifier', name: '_G' },
              {
                type: 'TableConstructorExpression',
                fields: [
                  {
                    type: 'TableKeyString',
                    key: { type: 'Identifier', name: 'slow_amount' },
                    value: { type: 'NumericLiteral', value: 1, raw: '1' },
                  },
                ],
              },
              {
                type: 'MemberExpression',
                indexer: '.',
                identifier: { type: 'Identifier', name: 'linear' },
                base: { type: 'Identifier', name: 'math' },
              },
              {
                type: 'FunctionDeclaration',
                identifier: null,
                isLocal: false,
                parameters: [],
                body: [
                  {
                    type: 'AssignmentStatement',
                    variables: [{ type: 'Identifier', name: 'slow_amount' }],
                    init: [{ type: 'NumericLiteral', value: 1, raw: '1' }],
                  },
                  {
                    type: 'AssignmentStatement',
                    variables: [
                      {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'paused' },
                        base: { type: 'Identifier', name: 'self' },
                      },
                    ],
                    init: [{ type: 'BooleanLiteral', value: false, raw: 'false' }],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'paused_t1' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'paused_t1' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'paused_t1' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'paused_t2' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'paused_t2' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'paused_t2' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'ng_t' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'ng_t' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ng_t' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'resume_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'resume_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'resume_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'restart_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'restart_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'restart_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'mouse_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'mouse_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'mouse_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'dark_transition_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'dark_transition_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dark_transition_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'run_timer_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'run_timer_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'run_timer_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'sfx_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'sfx_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'sfx_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'music_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'music_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'music_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'video_button_1' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'video_button_1' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'video_button_1' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'video_button_2' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'video_button_2' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'video_button_2' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'video_button_3' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'video_button_3' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'video_button_3' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'video_button_4' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'video_button_4' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'video_button_4' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'screen_shake_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'screen_shake_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'screen_shake_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'screen_movement_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'screen_movement_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'screen_movement_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'cooldown_snake_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'cooldown_snake_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'cooldown_snake_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'arrow_snake_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'arrow_snake_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'arrow_snake_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'quit_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'quit_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'quit_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'ng_plus_plus_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'ng_plus_plus_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ng_plus_plus_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'ng_plus_minus_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'ng_plus_minus_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'ng_plus_minus_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'MemberExpression',
                          indexer: '.',
                          identifier: { type: 'Identifier', name: 'main_menu_button' },
                          base: { type: 'Identifier', name: 'self' },
                        },
                        body: [
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'dead' },
                                base: {
                                  type: 'MemberExpression',
                                  indexer: '.',
                                  identifier: { type: 'Identifier', name: 'main_menu_button' },
                                  base: { type: 'Identifier', name: 'self' },
                                },
                              },
                            ],
                            init: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                          },
                          {
                            type: 'AssignmentStatement',
                            variables: [
                              {
                                type: 'MemberExpression',
                                indexer: '.',
                                identifier: { type: 'Identifier', name: 'main_menu_button' },
                                base: { type: 'Identifier', name: 'self' },
                              },
                            ],
                            init: [{ type: 'NilLiteral', value: null, raw: 'nil' }],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    type: 'CallStatement',
                    expression: {
                      type: 'CallExpression',
                      base: {
                        type: 'MemberExpression',
                        indexer: '.',
                        identifier: { type: 'Identifier', name: 'save_state' },
                        base: { type: 'Identifier', name: 'system' },
                      },
                      arguments: [],
                    },
                  },
                  {
                    type: 'IfStatement',
                    clauses: [
                      {
                        type: 'IfClause',
                        condition: {
                          type: 'LogicalExpression',
                          operator: 'or',
                          left: {
                            type: 'CallExpression',
                            base: {
                              type: 'MemberExpression',
                              indexer: ':',
                              identifier: { type: 'Identifier', name: 'is' },
                              base: { type: 'Identifier', name: 'self' },
                            },
                            arguments: [{ type: 'Identifier', name: 'MainMenu' }],
                          },
                          right: {
                            type: 'CallExpression',
                            base: {
                              type: 'MemberExpression',
                              indexer: ':',
                              identifier: { type: 'Identifier', name: 'is' },
                              base: { type: 'Identifier', name: 'self' },
                            },
                            arguments: [{ type: 'Identifier', name: 'BuyScreen' }],
                          },
                        },
                        body: [
                          {
                            type: 'CallStatement',
                            expression: {
                              type: 'CallExpression',
                              base: {
                                type: 'MemberExpression',
                                indexer: ':',
                                identifier: { type: 'Identifier', name: 'set_mouse_visible' },
                                base: { type: 'Identifier', name: 'input' },
                              },
                              arguments: [{ type: 'BooleanLiteral', value: true, raw: 'true' }],
                            },
                          },
                        ],
                      },
                      {
                        type: 'ElseifClause',
                        condition: {
                          type: 'CallExpression',
                          base: {
                            type: 'MemberExpression',
                            indexer: ':',
                            identifier: { type: 'Identifier', name: 'is' },
                            base: { type: 'Identifier', name: 'self' },
                          },
                          arguments: [{ type: 'Identifier', name: 'Arena' }],
                        },
                        body: [
                          {
                            type: 'CallStatement',
                            expression: {
                              type: 'CallExpression',
                              base: {
                                type: 'MemberExpression',
                                indexer: ':',
                                identifier: { type: 'Identifier', name: 'set_mouse_visible' },
                                base: { type: 'Identifier', name: 'input' },
                              },
                              arguments: [
                                {
                                  type: 'LogicalExpression',
                                  operator: 'or',
                                  left: {
                                    type: 'MemberExpression',
                                    indexer: '.',
                                    identifier: { type: 'Identifier', name: 'mouse_control' },
                                    base: { type: 'Identifier', name: 'state' },
                                  },
                                  right: { type: 'BooleanLiteral', value: false, raw: 'false' },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              { type: 'StringLiteral', value: null, raw: "'pause'" },
            ],
          },
        },
      ],
    },
    {
      type: 'FunctionDeclaration',
      identifier: {
        type: 'MemberExpression',
        indexer: '.',
        identifier: { type: 'Identifier', name: 'run' },
        base: { type: 'Identifier', name: 'love' },
      },
      isLocal: false,
      parameters: [],
      body: [
        {
          type: 'ReturnStatement',
          arguments: [
            {
              type: 'CallExpression',
              base: { type: 'Identifier', name: 'engine_run' },
              arguments: [
                {
                  type: 'TableConstructorExpression',
                  fields: [
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'game_name' },
                      value: { type: 'StringLiteral', value: null, raw: "'SNKRX'" },
                    },
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'window_width' },
                      value: { type: 'StringLiteral', value: null, raw: "'max'" },
                    },
                    {
                      type: 'TableKeyString',
                      key: { type: 'Identifier', name: 'window_height' },
                      value: { type: 'StringLiteral', value: null, raw: "'max'" },
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  ],
  comments: [
    {
      type: 'Comment',
      value: " ['saboteur'] = {'rogue', 'conjurer', 'nuker'},",
      raw: "-- ['saboteur'] = {'rogue', 'conjurer', 'nuker'},",
    },
    {
      type: 'Comment',
      value: " ['hunter'] = {'ranger', 'conjurer', 'forcer'},",
      raw: "-- ['hunter'] = {'ranger', 'conjurer', 'forcer'},",
    },
    {
      type: 'Comment',
      value: " ['illusionist'] = {'sorcerer', 'conjurer'},",
      raw: "-- ['illusionist'] = {'sorcerer', 'conjurer'},",
    },
    {
      type: 'Comment',
      value: " ['saboteur'] = '[red]Rogue, [orange]Conjurer, [red]Nuker',",
      raw: "-- ['saboteur'] = '[red]Rogue, [orange]Conjurer, [red]Nuker',",
    },
    {
      type: 'Comment',
      value: " ['hunter'] = '[green]Ranger, [orange]Conjurer, [yellow]Forcer',",
      raw: "-- ['hunter'] = '[green]Ranger, [orange]Conjurer, [yellow]Forcer',",
    },
    {
      type: 'Comment',
      value: " ['illusionist'] = '[blue2]Sorcerer, [orange]Conjurer',",
      raw: "-- ['illusionist'] = '[blue2]Sorcerer, [orange]Conjurer',",
    },
    { type: 'Comment', value: " ['saboteur'] = 2,", raw: "-- ['saboteur'] = 2," },
    { type: 'Comment', value: " ['hunter'] = 2,", raw: "-- ['hunter'] = 2," },
    { type: 'Comment', value: " ['lich'] = 4,", raw: "-- ['lich'] = 4," },
    { type: 'Comment', value: " ['launcher'] = 2,", raw: "-- ['launcher'] = 2," },
    { type: 'Comment', value: " ['illusionist'] = 3,", raw: "-- ['illusionist'] = 3," },
    {
      type: 'Comment',
      value:
        "  main:add(BuyScreen'buy_screen')\n  main:go_to('buy_screen', run.level or 1, run.units or {}, passives, run.shop_level or 1, run.shop_xp or 0)\n  -- main:go_to('buy_screen', 7, run.units or {}, {'unleash'})\n  ",
      raw: "--[[\n  main:add(BuyScreen'buy_screen')\n  main:go_to('buy_screen', run.level or 1, run.units or {}, passives, run.shop_level or 1, run.shop_xp or 0)\n  -- main:go_to('buy_screen', 7, run.units or {}, {'unleash'})\n  ]]",
    },
    { type: 'Comment', value: '', raw: '--' },
    {
      type: 'Comment',
      value:
        "  gold = 10\n  run_passive_pool = {\n    'centipede', 'ouroboros_technique_r', 'ouroboros_technique_l', 'amplify', 'resonance', 'ballista', 'call_of_the_void', 'crucio', 'speed_3', 'damage_4', 'shoot_5', 'death_6', 'lasting_7',\n    'defensive_stance', 'offensive_stance', 'kinetic_bomb', 'porcupine_technique', 'last_stand', 'seeping', 'deceleration', 'annihilation', 'malediction', 'hextouch', 'whispers_of_doom',\n    'tremor', 'heavy_impact', 'fracture', 'meat_shield', 'hive', 'baneling_burst', 'blunt_arrow', 'explosive_arrow', 'divine_machine_arrow', 'chronomancy', 'awakening', 'divine_punishment',\n    'assassination', 'flying_daggers', 'ultimatum', 'magnify', 'echo_barrage', 'unleash', 'reinforce', 'payback', 'enchanted', 'freezing_field', 'burning_field', 'gravity_field', 'magnetism',\n    'insurance', 'dividends', 'berserking', 'unwavering_stance', 'unrelenting_stance', 'blessing', 'haste', 'divine_barrage', 'orbitism', 'psyker_orbs', 'psychosink', 'rearm', 'taunt', 'construct_instability',\n    'intimidation', 'vulnerability', 'temporal_chains', 'ceremonial_dagger', 'homing_barrage', 'critical_strike', 'noxious_strike', 'infesting_strike', 'burning_strike', 'lucky_strike', 'healing_strike', 'stunning_strike',\n    'silencing_strike', 'culling_strike', 'lightning_strike', 'psycholeak', 'divine_blessing', 'hardening', 'kinetic_strike',\n  }\n  main:add(Arena'arena')\n  main:go_to('arena', 21, 0, {\n    {character = 'magician', level = 3},\n  }, {\n    {passive = 'awakening', level = 3},\n  })\n  ",
      raw: "--[[\n  gold = 10\n  run_passive_pool = {\n    'centipede', 'ouroboros_technique_r', 'ouroboros_technique_l', 'amplify', 'resonance', 'ballista', 'call_of_the_void', 'crucio', 'speed_3', 'damage_4', 'shoot_5', 'death_6', 'lasting_7',\n    'defensive_stance', 'offensive_stance', 'kinetic_bomb', 'porcupine_technique', 'last_stand', 'seeping', 'deceleration', 'annihilation', 'malediction', 'hextouch', 'whispers_of_doom',\n    'tremor', 'heavy_impact', 'fracture', 'meat_shield', 'hive', 'baneling_burst', 'blunt_arrow', 'explosive_arrow', 'divine_machine_arrow', 'chronomancy', 'awakening', 'divine_punishment',\n    'assassination', 'flying_daggers', 'ultimatum', 'magnify', 'echo_barrage', 'unleash', 'reinforce', 'payback', 'enchanted', 'freezing_field', 'burning_field', 'gravity_field', 'magnetism',\n    'insurance', 'dividends', 'berserking', 'unwavering_stance', 'unrelenting_stance', 'blessing', 'haste', 'divine_barrage', 'orbitism', 'psyker_orbs', 'psychosink', 'rearm', 'taunt', 'construct_instability',\n    'intimidation', 'vulnerability', 'temporal_chains', 'ceremonial_dagger', 'homing_barrage', 'critical_strike', 'noxious_strike', 'infesting_strike', 'burning_strike', 'lucky_strike', 'healing_strike', 'stunning_strike',\n    'silencing_strike', 'culling_strike', 'lightning_strike', 'psycholeak', 'divine_blessing', 'hardening', 'kinetic_strike',\n  }\n  main:add(Arena'arena')\n  main:go_to('arena', 21, 0, {\n    {character = 'magician', level = 3},\n  }, {\n    {passive = 'awakening', level = 3},\n  })\n  ]]",
    },
    { type: 'Comment', value: '', raw: '--' },
    {
      type: 'Comment',
      value: "  main:add(Media'media')\n  main:go_to('media')\n  ",
      raw: "--[[\n  main:add(Media'media')\n  main:go_to('media')\n  ]]",
    },
    { type: 'Comment', value: '', raw: '--' },
    {
      type: 'Comment',
      value:
        '  print(table.tostring(love.graphics.getSupported()))\n  print(love.graphics.getRendererInfo())\n  local formats = love.graphics.getImageFormats()\n  for f, s in pairs(formats) do print(f, tostring(s)) end\n  local canvasformats = love.graphics.getCanvasFormats()\n  for f, s in pairs(canvasformats) do print(f, tostring(s)) end\n  print(table.tostring(love.graphics.getSystemLimits()))\n  print(table.tostring(love.graphics.getStats()))\n  ',
      raw: '--[[\n  print(table.tostring(love.graphics.getSupported()))\n  print(love.graphics.getRendererInfo())\n  local formats = love.graphics.getImageFormats()\n  for f, s in pairs(formats) do print(f, tostring(s)) end\n  local canvasformats = love.graphics.getCanvasFormats()\n  for f, s in pairs(canvasformats) do print(f, tostring(s)) end\n  print(table.tostring(love.graphics.getSystemLimits()))\n  print(table.tostring(love.graphics.getStats()))\n  ]]',
    },
    { type: 'Comment', value: '', raw: '--' },
    {
      type: 'Comment',
      value:
        '  if input.b.pressed then\n    -- debugging_memory = not debugging_memory\n    for k, v in pairs(system.type_count()) do\n      print(k, v)\n    end\n    print("-- " .. math.round(tonumber(collectgarbage("count"))/1024, 3) .. "MB --")\n    print()\n  end\n  ',
      raw: '--[[\n  if input.b.pressed then\n    -- debugging_memory = not debugging_memory\n    for k, v in pairs(system.type_count()) do\n      print(k, v)\n    end\n    print("-- " .. math.round(tonumber(collectgarbage("count"))/1024, 3) .. "MB --")\n    print()\n  end\n  ]]',
    },
    { type: 'Comment', value: '', raw: '--' },
    {
      type: 'Comment',
      value:
        '  if input.n.pressed then\n    if main.current.sfx_button then\n      main.current.sfx_button:action()\n      main.current.sfx_button.selected = false\n    else\n      if sfx.volume == 0.5 then\n        sfx.volume = 0\n        state.volume_muted = true\n      elseif sfx.volume == 0 then\n        sfx.volume = 0.5\n        state.volume_muted = false\n      end\n    end\n  end\n\n  if input.m.pressed then\n    if main.current.music_button then\n      main.current.music_button:action()\n      main.current.music_button.selected = false\n    else\n      if music.volume == 0.5 then\n        state.music_muted = true\n        music.volume = 0\n      elseif music.volume == 0 then\n        music.volume = 0.5\n        state.music_muted = false\n      end\n    end\n  end\n  ',
      raw: '--[[\n  if input.n.pressed then\n    if main.current.sfx_button then\n      main.current.sfx_button:action()\n      main.current.sfx_button.selected = false\n    else\n      if sfx.volume == 0.5 then\n        sfx.volume = 0\n        state.volume_muted = true\n      elseif sfx.volume == 0 then\n        sfx.volume = 0.5\n        state.volume_muted = false\n      end\n    end\n  end\n\n  if input.m.pressed then\n    if main.current.music_button then\n      main.current.music_button:action()\n      main.current.music_button.selected = false\n    else\n      if music.volume == 0.5 then\n        state.music_muted = true\n        music.volume = 0\n      elseif music.volume == 0 then\n        music.volume = 0.5\n        state.music_muted = false\n      end\n    end\n  end\n  ]]',
    },
    { type: 'Comment', value: '', raw: '--' },
    {
      type: 'Comment',
      value:
        '  if input.f11.pressed then\n    steam.userStats.resetAllStats(true)\n    steam.userStats.storeStats()\n  end\n  ',
      raw: '--[[\n  if input.f11.pressed then\n    steam.userStats.resetAllStats(true)\n    steam.userStats.storeStats()\n  end\n  ]]',
    },
    { type: 'Comment', value: '', raw: '--' },
  ],
};
